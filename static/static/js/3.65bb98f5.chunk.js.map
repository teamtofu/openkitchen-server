{"version":3,"sources":["../node_modules/sdp/sdp.js","../node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","../node_modules/webrtc-adapter/src/js/utils.js","../node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","../node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","../node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","../node_modules/webrtc-adapter/src/js/edge/getusermedia.js","../node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","../node_modules/webrtc-adapter/src/js/edge/edge_shim.js","../node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","../node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","../node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","../node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","../node_modules/webrtc-adapter/src/js/safari/safari_shim.js","../node_modules/webrtc-adapter/src/js/common_shim.js","../node_modules/webrtc-adapter/src/js/adapter_core.js","../node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["SDPUtils","generateIdentifier","Math","random","toString","substr","localCName","splitLines","blob","trim","split","map","line","splitSections","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","parts","candidate","foundation","substring","component","parseInt","protocol","toLowerCase","priority","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","undefined","preferredPayloadType","parseExtmap","id","direction","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","getIceParameters","concat","password","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","secondarySsrc","encodingParameters","hasRed","hasUlpfec","primarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","parseMsid","spec","stream","track","planB","msidParts","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","version","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","msid","sendEncodingParameters","getDirection","getKind","isRejected","parseMLine","fmt","slice","parseOLine","username","sessionId","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports","__webpack_require__","dtlsRole","trackId","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","min","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","action","signalingState","offer","setLocalDescription","setRemoteDescription","answer","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","find","remoteCandidate","addRemoteCandidate","makeError","e","Error","code","NotSupportedError","InvalidStateError","InvalidAccessError","TypeError","OperationError","window","edgeVersion","addTrackToStreamAndFireEvent","addTrack","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","pc","receiver","streams","trackEvent","Event","setTimeout","_dispatchEvent","RTCPeerConnection","config","this","_eventTarget","document","createDocumentFragment","method","bind","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceConnectionState","connectionState","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","iceTransportPolicy","iceServers","hasTurn","server","urls","url","console","warn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","defineProperty","prototype","configurable","get","onicecandidate","onaddstream","ontrack","onremovestream","onsignalingstatechange","oniceconnectionstatechange","onconnectionstatechange","onicegatheringstatechange","onnegotiationneeded","ondatachannel","event","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","transports","_createIceAndDtlsTransports","s","_maybeFireNegotiationNeeded","RTCRtpSender","addStream","getTracks","clonedStream","clone","idx","clonedTrack","addEventListener","enabled","removeTrack","sender","t","stop","splice","removeStream","getSenders","getReceivers","_createIceGatherer","sdpMLineIndex","writable","bufferedCandidateEvents","bufferCandidates","end","state","_gather","onlocalcandidate","removeEventListener","evt","sdpMid","cand","serializedCandidate","assign","toJSON","complete","every","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","onerror","_disposeIceAndDtlsTransports","_transceive","send","recv","encodings","p","receive","Promise","reject","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","start","_updateSignalingState","resolve","receiverList","iceOptions","remoteMsid","isComplete","cands","setTransport","setRemoteCandidates","c","MediaStream","default","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","sid","item","close","newState","states","new","closed","checking","connected","completed","disconnected","failed","connecting","createOffer","numAudioTracks","numVideoTracks","offerOptions","arguments","mandatory","optional","offerToReceiveAudio","offerToReceiveVideo","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","desc","RTCSessionDescription","createAnswer","mediaSectionsInOffer","localTrack","getAudioTracks","getVideoTracks","addIceCandidate","candidateString","getStats","selector","MediaStreamTrack","senderOrReceiver","promises","all","then","allStats","results","Map","stats","stat","set","ortcObjectName","nativeGetstats","apply","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","methods","nativeMethod","args","error","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","match","wrapPeerConnectionEvent","eventNameToWrap","wrapper","proto","nativeAddEventListener","nativeEventName","cb","wrappedCallback","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","enumerable","disableLog","bool","disableWarnings","log","deprecated","oldMethod","newMethod","detectBrowser","navigator","result","browser","mozGetUserMedia","userAgent","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","mediaDevices","compactObject","data","reduce","accumulator","key","isObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","walkStats","base","resultSet","has","endsWith","getusermedia_logging","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","max","oldname_","oc","mix","advanced","shimConstraints_","constraints","func","audio","remap","a","b","video","face","facingMode","matches","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","devices","dev","d","some","label","includes","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","message","constraint","constraintName","getUserMedia","onSuccess","onError","origGetUserMedia","cs","DOMException","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","width","heightSpecified","height","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","f","origSetRemoteDescription","_this","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","_this2","origRemoveStream","_this3","origGetSenders","_this4","senders","shimGetStats","origGetStats","successCallback","errorCallback","_this5","fixChromeStats_","response","standardReport","report","standardStats","timestamp","names","makeMapStats","shimSenderReceiverGetStats","_this6","origGetReceivers","_this7","receivers","srcElement","err","shimAddTrackRemoveTrackWithNative","_this8","_shimmedLocalStreams","streamId","_this9","existingSenders","newSenders","newSender","_this10","shimAddTrackRemoveTrack","origGetLocalStreams","_this11","nativeStreams","_reverseStreams","_this12","_streams","newStream","_this13","call","oldStream","_this14","replaceInternalStreamId","origSetLocalDescription","internalId","externalStream","internalStream","replace","RegExp","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","_this15","streamid","shimPeerConnection","RTCIceCandidate","nativeAddIceCandidate","fixNegotiationNeeded","target","getusermedia_shimGetUserMedia","catch","getdisplaymedia_shimGetDisplayMedia","edge_shim_shimPeerConnection","origMSTEnabled","ev","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","rtcpeerconnection_default","validTurn","startsWith","shimReplaceTrack","replaceTrack","setTrack","firefox_getusermedia_shimGetUserMedia","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","firefox_getdisplaymedia_shimGetDisplayMedia","preferredMediaSource","mediaSource","firefox_shim_shimOnTrack","RTCTrackEvent","firefox_shim_shimPeerConnection","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","onSucc","onErr","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","failureCallback","options","promise","withCallback","safari_shim_shimGetUserMedia","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","newIceServers","hasOwnProperty","generateCertificate","shimTrackEventTransceiver","RTCTransceiver","shimCreateOfferLegacy","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","sdp_default","augmentedCandidate","shimMaxMessageSize","RTCSctpTransport","_sctp","mLine","sctpInDescription","maxMessageSize","isFirefox","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","getMaxMessageSize","Number","POSITIVE_INFINITY","sctp","shimSendThrowTypeError","origCreateDataChannel","createDataChannel","dataChannel","wrapDcSend","channel","dc","origDataChannelSend","size","byteLength","readyState","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter_core_adapter","shimChrome","shimFirefox","shimEdge","shimSafari","logging","adapter","commonShim","common_shim_namespaceObject","chrome_shim_namespaceObject","browserShim","firefox_shim_namespaceObject","edge_shim_namespaceObject","safari_shim_namespaceObject","adapterFactory","__webpack_exports__"],"mappings":"0FAGA,IAAAA,EAAA,CAGAC,mBAAA,WACA,OAAAC,KAAAC,SAAAC,SAAA,IAAAC,OAAA,QAIAL,EAAAM,WAAAN,EAAAC,qBAEAD,EAAAO,WAAA,SAAAC,GACA,OAAAA,EAAAC,OAAAC,MAAA,MAAAC,IAAA,SAAAC,GACA,OAAAA,EAAAH,UAKAT,EAAAa,cAAA,SAAAL,GAEA,OADAA,EAAAE,MAAA,QACAC,IAAA,SAAAG,EAAAC,GACA,OAAAA,EAAA,OAAAD,KAAAL,OAAA,UAKAT,EAAAgB,eAAA,SAAAR,GACA,IAAAS,EAAAjB,EAAAa,cAAAL,GACA,OAAAS,KAAA,IAIAjB,EAAAkB,iBAAA,SAAAV,GACA,IAAAS,EAAAjB,EAAAa,cAAAL,GAEA,OADAS,EAAAE,QACAF,GAIAjB,EAAAoB,YAAA,SAAAZ,EAAAa,GACA,OAAArB,EAAAO,WAAAC,GAAAc,OAAA,SAAAV,GACA,WAAAA,EAAAW,QAAAF,MAOArB,EAAAwB,eAAA,SAAAZ,GAsBA,IArBA,IAAAa,EAQAC,EAAA,CACAC,YANAF,EADA,IAAAb,EAAAW,QAAA,gBACAX,EAAAgB,UAAA,IAAAlB,MAAA,KAEAE,EAAAgB,UAAA,IAAAlB,MAAA,MAIA,GACAmB,UAAAC,SAAAL,EAAA,OACAM,SAAAN,EAAA,GAAAO,cACAC,SAAAH,SAAAL,EAAA,OACAS,GAAAT,EAAA,GACAU,QAAAV,EAAA,GAEAW,KAAAN,SAAAL,EAAA,OAEAY,KAAAZ,EAAA,IAGAa,EAAA,EAAiBA,EAAAb,EAAAc,OAAkBD,GAAA,EACnC,OAAAb,EAAAa,IACA,YACAZ,EAAAc,eAAAf,EAAAa,EAAA,GACA,MAEA,YACAZ,EAAAe,YAAAX,SAAAL,EAAAa,EAAA,OACA,MAEA,cACAZ,EAAAgB,QAAAjB,EAAAa,EAAA,GACA,MAEA,YACAZ,EAAAiB,MAAAlB,EAAAa,EAAA,GAEAZ,EAAAkB,iBAAAnB,EAAAa,EAAA,GACA,MAEA,QAEAZ,EAAAD,EAAAa,IAAAb,EAAAa,EAAA,GAKA,OAAAZ,GAIA1B,EAAA6C,eAAA,SAAAnB,GACA,IAAAoB,EAAA,GACAA,EAAAC,KAAArB,EAAAC,YACAmB,EAAAC,KAAArB,EAAAG,WACAiB,EAAAC,KAAArB,EAAAK,SAAAiB,eACAF,EAAAC,KAAArB,EAAAO,UACAa,EAAAC,KAAArB,EAAAS,SAAAT,EAAAQ,IACAY,EAAAC,KAAArB,EAAAU,MACA,IAAAC,EAAAX,EAAAW,KAqBA,OApBAS,EAAAC,KAAA,OACAD,EAAAC,KAAAV,GAEA,SAAAA,GAAAX,EAAAc,gBAAAd,EAAAe,cACAK,EAAAC,KAAA,SACAD,EAAAC,KAAArB,EAAAc,gBACAM,EAAAC,KAAA,SACAD,EAAAC,KAAArB,EAAAe,cAGAf,EAAAgB,SAAA,QAAAhB,EAAAK,SAAAC,gBACAc,EAAAC,KAAA,WACAD,EAAAC,KAAArB,EAAAgB,WAGAhB,EAAAkB,kBAAAlB,EAAAiB,SACAG,EAAAC,KAAA,SACAD,EAAAC,KAAArB,EAAAkB,kBAAAlB,EAAAiB,QAGA,aAAAG,EAAAG,KAAA,MAKAjD,EAAAkD,gBAAA,SAAAtC,GACA,OAAAA,EAAAP,OAAA,IAAAK,MAAA,MAKAV,EAAAmD,YAAA,SAAAvC,GACA,IAAAa,EAAAb,EAAAP,OAAA,GAAAK,MAAA,KACA0C,EAAA,CACAC,YAAAvB,SAAAL,EAAAN,QAAA,KAUA,OAPAM,IAAA,GAAAf,MAAA,KACA0C,EAAAE,KAAA7B,EAAA,GACA2B,EAAAG,UAAAzB,SAAAL,EAAA,OAEA2B,EAAAI,SAAA,IAAA/B,EAAAc,OAAAT,SAAAL,EAAA,SAEA2B,EAAAK,YAAAL,EAAAI,SACAJ,GAKApD,EAAA0D,YAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAN,iBAEAQ,IAAAF,EAAAG,uBACAF,EAAAD,EAAAG,sBAGA,IAAAN,EAAAG,EAAAH,UAAAG,EAAAF,aAAA,EACA,kBAAAG,EAAA,IAAAD,EAAAL,KAAA,IAAAK,EAAAJ,WAAA,IAAAC,EAAA,IAAAA,EAAA,YAMAxD,EAAA+D,YAAA,SAAAnD,GACA,IAAAa,EAAAb,EAAAP,OAAA,GAAAK,MAAA,KACA,OACAsD,GAAAlC,SAAAL,EAAA,OACAwC,UAAAxC,EAAA,GAAAF,QAAA,OAAAE,EAAA,GAAAf,MAAA,mBACAwD,IAAAzC,EAAA,KAMAzB,EAAAmE,YAAA,SAAAC,GACA,mBAAAA,EAAAJ,IAAAI,EAAAC,cAAAD,EAAAH,WAAA,aAAAG,EAAAH,UAAA,IAAAG,EAAAH,UAAA,QAAAG,EAAAF,IAAA,QAMAlE,EAAAsE,UAAA,SAAA1D,GAKA,IAJA,IACA2D,EADAnB,EAAA,GAEA3B,EAAAb,EAAAP,OAAAO,EAAAW,QAAA,QAAAb,MAAA,KAEA8D,EAAA,EAAiBA,EAAA/C,EAAAc,OAAkBiC,IAEnCpB,GADAmB,EAAA9C,EAAA+C,GAAA/D,OAAAC,MAAA,MACA,GAAAD,QAAA8D,EAAA,GAGA,OAAAnB,GAIApD,EAAAyE,UAAA,SAAAd,GACA,IAAA/C,EAAA,GACAgD,EAAAD,EAAAN,YAMA,QAJAQ,IAAAF,EAAAG,uBACAF,EAAAD,EAAAG,sBAGAH,EAAAe,YAAAC,OAAAC,KAAAjB,EAAAe,YAAAnC,OAAA,CACA,IAAAsC,EAAA,GACAF,OAAAC,KAAAjB,EAAAe,YAAAI,QAAA,SAAAC,GACApB,EAAAe,WAAAK,GACAF,EAAA9B,KAAAgC,EAAA,IAAApB,EAAAe,WAAAK,IAEAF,EAAA9B,KAAAgC,KAGAnE,GAAA,UAAAgD,EAAA,IAAAiB,EAAA5B,KAAA,KAAiD,OAGjD,OAAArC,GAKAZ,EAAAgF,YAAA,SAAApE,GACA,IAAAa,EAAAb,EAAAP,OAAAO,EAAAW,QAAA,QAAAb,MAAA,KACA,OACA2B,KAAAZ,EAAAN,QACA8D,UAAAxD,EAAAwB,KAAA,OAKAjD,EAAAkF,YAAA,SAAAvB,GACA,IAAAwB,EAAA,GACAvB,EAAAD,EAAAN,YAaA,YAXAQ,IAAAF,EAAAG,uBACAF,EAAAD,EAAAG,sBAGAH,EAAAyB,cAAAzB,EAAAyB,aAAA7C,QAEAoB,EAAAyB,aAAAN,QAAA,SAAAO,GACAF,GAAA,aAAAvB,EAAA,IAAAyB,EAAAhD,MAAAgD,EAAAJ,WAAAI,EAAAJ,UAAA1C,OAAA,IAAA8C,EAAAJ,UAAA,aAIAE,GAKAnF,EAAAsF,eAAA,SAAA1E,GACA,IAAA2E,EAAA3E,EAAAW,QAAA,KACAE,EAAA,CACA+D,KAAA1D,SAAAlB,EAAAP,OAAA,EAAAkF,EAAA,QAEAE,EAAA7E,EAAAW,QAAA,IAAAgE,GASA,OAPAE,GAAA,GACAhE,EAAAiE,UAAA9E,EAAAP,OAAAkF,EAAA,EAAAE,EAAAF,EAAA,GACA9D,EAAAkE,MAAA/E,EAAAP,OAAAoF,EAAA,IAEAhE,EAAAiE,UAAA9E,EAAAP,OAAAkF,EAAA,GAGA9D,GAGAzB,EAAA4F,eAAA,SAAAhF,GACA,IAAAa,EAAAb,EAAAP,OAAA,IAAAK,MAAA,KACA,OACAmF,UAAApE,EAAAN,QACA2E,MAAArE,EAAAd,IAAA,SAAA6E,GACA,OAAA1D,SAAA0D,EAAA,QAOAxF,EAAA+F,OAAA,SAAAC,GACA,IAAAC,EAAAjG,EAAAoB,YAAA4E,EAAA,aAEA,GAAAC,EACA,OAAAA,EAAA5F,OAAA,IAIAL,EAAAkG,iBAAA,SAAAtF,GACA,IAAAa,EAAAb,EAAAP,OAAA,IAAAK,MAAA,KACA,OACAyF,UAAA1E,EAAA,GAAAO,cAEA2D,MAAAlE,EAAA,KAOAzB,EAAAoG,kBAAA,SAAAJ,EAAAK,GAIA,OACAC,KAAA,OACAC,aALAvG,EAAAoB,YAAA4E,EAAAK,EAAA,kBAKA1F,IAAAX,EAAAkG,oBAKAlG,EAAAwG,oBAAA,SAAA3B,EAAA4B,GACA,IAAA3D,EAAA,WAAA2D,EAAA,OAIA,OAHA5B,EAAA0B,aAAAzB,QAAA,SAAA4B,GACA5D,GAAA,iBAAA4D,EAAAP,UAAA,IAAAO,EAAAf,MAAA,SAEA7C,GAMA9C,EAAA2G,iBAAA,SAAAX,EAAAK,GACA,IAAAlB,EAAAnF,EAAAO,WAAAyF,GAWA,MARA,CACApD,kBAFAuC,IAAAyB,OAAA5G,EAAAO,WAAA8F,KAEA/E,OAAA,SAAAV,GACA,WAAAA,EAAAW,QAAA,kBACK,GAAAlB,OAAA,IACLwG,SAAA1B,EAAA7D,OAAA,SAAAV,GACA,WAAAA,EAAAW,QAAA,gBACK,GAAAlB,OAAA,MAMLL,EAAA8G,mBAAA,SAAAjC,GACA,qBAAAA,EAAAjC,iBAAA,iBAAAiC,EAAAgC,SAAA,QAIA7G,EAAA+G,mBAAA,SAAAf,GAUA,IATA,IAAAgB,EAAA,CACAC,OAAA,GACAC,iBAAA,GACAC,cAAA,GACAC,KAAA,IAGAC,EADArH,EAAAO,WAAAyF,GACA,GAAAtF,MAAA,KAEA4B,EAAA,EAAiBA,EAAA+E,EAAA9E,OAAkBD,IAAA,CAEnC,IAAAsB,EAAAyD,EAAA/E,GACAgF,EAAAtH,EAAAoB,YAAA4E,EAAA,YAAApC,EAAA,QAEA,GAAA0D,EAAA,CACA,IAAA3D,EAAA3D,EAAAmD,YAAAmE,GACAC,EAAAvH,EAAAoB,YAAA4E,EAAA,UAAApC,EAAA,KAMA,OAJAD,EAAAe,WAAA6C,EAAAhF,OAAAvC,EAAAsE,UAAAiD,EAAA,OACA5D,EAAAyB,aAAApF,EAAAoB,YAAA4E,EAAA,aAAApC,EAAA,KAAAjD,IAAAX,EAAAgF,aACAgC,EAAAC,OAAAlE,KAAAY,GAEAA,EAAAL,KAAAN,eACA,UACA,aACAgE,EAAAG,cAAApE,KAAAY,EAAAL,KAAAN,iBAcA,OAJAhD,EAAAoB,YAAA4E,EAAA,aAAAlB,QAAA,SAAAlE,GACAoG,EAAAE,iBAAAnE,KAAA/C,EAAA+D,YAAAnD,MAGAoG,GAKAhH,EAAAwH,oBAAA,SAAAC,EAAAC,GACA,IAAA5E,EAAA,GAEAA,GAAA,KAAA2E,EAAA,IACA3E,GAAA4E,EAAAT,OAAA1E,OAAA,UAEAO,GAAA,sBACAA,GAAA4E,EAAAT,OAAAtG,IAAA,SAAAgD,GACA,YAAAE,IAAAF,EAAAG,qBACAH,EAAAG,qBAGAH,EAAAN,cACGJ,KAAA,YACHH,GAAA,uBACAA,GAAA,8BAEA4E,EAAAT,OAAAnC,QAAA,SAAAnB,GACAb,GAAA9C,EAAA0D,YAAAC,GACAb,GAAA9C,EAAAyE,UAAAd,GACAb,GAAA9C,EAAAkF,YAAAvB,KAEA,IAAAgE,EAAA,EAoBA,OAnBAD,EAAAT,OAAAnC,QAAA,SAAAnB,GACAA,EAAAgE,aACAA,EAAAhE,EAAAgE,YAIAA,EAAA,IACA7E,GAAA,cAAA6E,EAAA,QAGA7E,GAAA,iBAEA4E,EAAAR,kBACAQ,EAAAR,iBAAApC,QAAA,SAAA8C,GACA9E,GAAA9C,EAAAmE,YAAAyD,KAKA9E,GAKA9C,EAAA6H,2BAAA,SAAA7B,GACA,IAWA8B,EAXAC,EAAA,GACAf,EAAAhH,EAAA+G,mBAAAf,GACAgC,GAAA,IAAAhB,EAAAG,cAAA5F,QAAA,OACA0G,GAAA,IAAAjB,EAAAG,cAAA5F,QAAA,UAEAuE,EAAA9F,EAAAoB,YAAA4E,EAAA,WAAArF,IAAA,SAAAC,GACA,OAAAZ,EAAAsF,eAAA1E,KACGU,OAAA,SAAAG,GACH,gBAAAA,EAAAiE,YAEAwC,EAAApC,EAAAvD,OAAA,GAAAuD,EAAA,GAAAN,KAEA2C,EAAAnI,EAAAoB,YAAA4E,EAAA,oBAAArF,IAAA,SAAAC,GAEA,OADAA,EAAAP,OAAA,IAAAK,MAAA,KACAC,IAAA,SAAAG,GACA,OAAAgB,SAAAhB,EAAA,QAIAqH,EAAA5F,OAAA,GAAA4F,EAAA,GAAA5F,OAAA,GAAA4F,EAAA,QAAAD,IACAJ,EAAAK,EAAA,OAGAnB,EAAAC,OAAAnC,QAAA,SAAAnB,GACA,WAAAA,EAAAL,KAAAN,eAAAW,EAAAe,WAAA0D,IAAA,CACA,IAAAC,EAAA,CACA7C,KAAA0C,EACAI,iBAAAxG,SAAA6B,EAAAe,WAAA0D,IAAA,KAGAF,GAAAJ,IACAO,EAAAE,IAAA,CACA/C,KAAAsC,IAIAC,EAAAhF,KAAAsF,GAEAL,KACAK,EAAAG,KAAAC,MAAAD,KAAAE,UAAAL,KACAM,IAAA,CACAnD,KAAA0C,EACAU,UAAAX,EAAA,oBAEAF,EAAAhF,KAAAsF,OAKA,IAAAN,EAAAxF,QAAA2F,GACAH,EAAAhF,KAAA,CACAyC,KAAA0C,IAKA,IAAAW,EAAA7I,EAAAoB,YAAA4E,EAAA,MAiBA,OAfA6C,EAAAtG,SAEAsG,EADA,IAAAA,EAAA,GAAAtH,QAAA,WACAO,SAAA+G,EAAA,GAAAxI,OAAA,OACK,IAAAwI,EAAA,GAAAtH,QAAA,SAEL,IAAAO,SAAA+G,EAAA,GAAAxI,OAAA,qBAEAwD,EAGAkE,EAAAjD,QAAA,SAAAD,GACAA,EAAAiE,WAAAD,KAIAd,GAIA/H,EAAA+I,oBAAA,SAAA/C,GACA,IAAAgD,EAAA,GAGAC,EAAAjJ,EAAAoB,YAAA4E,EAAA,WAAArF,IAAA,SAAAC,GACA,OAAAZ,EAAAsF,eAAA1E,KACGU,OAAA,SAAA4H,GACH,gBAAAA,EAAAxD,YACG,GAEHuD,IACAD,EAAAG,MAAAF,EAAAtD,MACAqD,EAAAxD,KAAAyD,EAAAzD,MAKA,IAAA4D,EAAApJ,EAAAoB,YAAA4E,EAAA,gBACAgD,EAAAK,YAAAD,EAAA7G,OAAA,EACAyG,EAAAM,SAAA,IAAAF,EAAA7G,OAGA,IAAAgH,EAAAvJ,EAAAoB,YAAA4E,EAAA,cAEA,OADAgD,EAAAO,MAAAhH,OAAA,EACAyG,GAKAhJ,EAAAwJ,UAAA,SAAAxD,GACA,IAAAvE,EACAgI,EAAAzJ,EAAAoB,YAAA4E,EAAA,WAEA,OAAAyD,EAAAlH,OAEA,OACAmH,QAFAjI,EAAAgI,EAAA,GAAApJ,OAAA,GAAAK,MAAA,MAEA,GACAiJ,MAAAlI,EAAA,IAIA,IAAAmI,EAAA5J,EAAAoB,YAAA4E,EAAA,WAAArF,IAAA,SAAAC,GACA,OAAAZ,EAAAsF,eAAA1E,KACGU,OAAA,SAAAuI,GACH,eAAAA,EAAAnE,YAGA,OAAAkE,EAAArH,OAAA,EAEA,CACAmH,QAFAjI,EAAAmI,EAAA,GAAAjE,MAAAjF,MAAA,MAEA,GACAiJ,MAAAlI,EAAA,SAJA,GAaAzB,EAAA8J,kBAAA,WACA,OAAA5J,KAAAC,SAAAC,WAAAC,OAAA,OAQAL,EAAA+J,wBAAA,SAAAC,EAAAC,EAAAC,GACA,IACAC,OAAAtG,IAAAoG,IAAA,EAUA,mBAFAC,GAAA,qBAEA,KARAF,GAGAhK,EAAA8J,qBAKA,IAAAK,EAAA,yCAGAnK,EAAAoK,kBAAA,SAAAC,EAAA3C,EAAArF,EAAAqH,GACA,IAAA5G,EAAA9C,EAAAwH,oBAAA6C,EAAA5C,KAAAC,GAmBA,GAjBA5E,GAAA9C,EAAA8G,mBAAAuD,EAAAC,YAAAC,sBAEAzH,GAAA9C,EAAAwG,oBAAA6D,EAAAG,cAAAD,qBAAA,UAAAlI,EAAA,oBACAS,GAAA,SAAAuH,EAAApE,IAAA,OAEAoE,EAAApG,UACAnB,GAAA,KAAAuH,EAAApG,UAAA,OACGoG,EAAAI,WAAAJ,EAAAK,YACH5H,GAAA,iBACGuH,EAAAI,UACH3H,GAAA,iBACGuH,EAAAK,YACH5H,GAAA,iBAEAA,GAAA,iBAGAuH,EAAAI,UAAA,CAEA,IAAAE,EAAA,QAAAjB,EAAA1F,GAAA,IAAAqG,EAAAI,UAAAd,MAAA3F,GAAA,OACAlB,GAAA,KAAA6H,EAEA7H,GAAA,UAAAuH,EAAAO,uBAAA,GAAApF,KAAA,IAAAmF,EAEAN,EAAAO,uBAAA,GAAArC,MACAzF,GAAA,UAAAuH,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,IAAAmF,EACA7H,GAAA,oBAAAuH,EAAAO,uBAAA,GAAApF,KAAA,IAAA6E,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,QAWA,OANA1C,GAAA,UAAAuH,EAAAO,uBAAA,GAAApF,KAAA,UAAAxF,EAAAM,WAAA,OAEA+J,EAAAI,WAAAJ,EAAAO,uBAAA,GAAArC,MACAzF,GAAA,UAAAuH,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,UAAAxF,EAAAM,WAAA,QAGAwC,GAIA9C,EAAA6K,aAAA,SAAA7E,EAAAK,GAIA,IAFA,IAAAlB,EAAAnF,EAAAO,WAAAyF,GAEA1D,EAAA,EAAiBA,EAAA6C,EAAA5C,OAAkBD,IACnC,OAAA6C,EAAA7C,IACA,iBACA,iBACA,iBACA,iBACA,OAAA6C,EAAA7C,GAAAjC,OAAA,GAOA,OAAAgG,EACArG,EAAA6K,aAAAxE,GAGA,YAGArG,EAAA8K,QAAA,SAAA9E,GAGA,OAFAhG,EAAAO,WAAAyF,GACA,GAAAtF,MAAA,KACA,GAAAL,OAAA,IAGAL,EAAA+K,WAAA,SAAA/E,GACA,YAAAA,EAAAtF,MAAA,WAGAV,EAAAgL,WAAA,SAAAhF,GACA,IACAvE,EADAzB,EAAAO,WAAAyF,GACA,GAAA3F,OAAA,GAAAK,MAAA,KACA,OACA+G,KAAAhG,EAAA,GACAW,KAAAN,SAAAL,EAAA,OACAM,SAAAN,EAAA,GACAwJ,IAAAxJ,EAAAyJ,MAAA,GAAAjI,KAAA,OAIAjD,EAAAmL,WAAA,SAAAnF,GACA,IACAvE,EADAzB,EAAAoB,YAAA4E,EAAA,SACA3F,OAAA,GAAAK,MAAA,KACA,OACA0K,SAAA3J,EAAA,GACA4J,UAAA5J,EAAA,GACA6J,eAAAxJ,SAAAL,EAAA,OACA8J,QAAA9J,EAAA,GACA+J,YAAA/J,EAAA,GACAU,QAAAV,EAAA,KAKAzB,EAAAyL,WAAA,SAAAjL,GACA,qBAAAA,GAAA,IAAAA,EAAA+B,OACA,SAKA,IAFA,IAAA4C,EAAAnF,EAAAO,WAAAC,GAEA8B,EAAA,EAAiBA,EAAA6C,EAAA5C,OAAkBD,IACnC,GAAA6C,EAAA7C,GAAAC,OAAA,SAAA4C,EAAA7C,GAAAoJ,OAAA,GACA,SAKA,UAKAC,EAAAC,QAAA5L,oCC9sBA,IAAAA,EAAe6L,EAAQ,KAYvB,SAAAzB,EAAAC,EAAA3C,EAAArF,EAAAqH,EAAAoC,GACA,IAAAhJ,EAAA9C,EAAAwH,oBAAA6C,EAAA5C,KAAAC,GAiBA,GAfA5E,GAAA9C,EAAA8G,mBAAAuD,EAAAC,YAAAC,sBAEAzH,GAAA9C,EAAAwG,oBAAA6D,EAAAG,cAAAD,qBAAA,UAAAlI,EAAA,UAAAyJ,GAAA,UACAhJ,GAAA,SAAAuH,EAAApE,IAAA,OAEAoE,EAAAI,WAAAJ,EAAAK,YACA5H,GAAA,iBACGuH,EAAAI,UACH3H,GAAA,iBACGuH,EAAAK,YACH5H,GAAA,iBAEAA,GAAA,iBAGAuH,EAAAI,UAAA,CACA,IAAAsB,EAAA1B,EAAAI,UAAAuB,iBAAA3B,EAAAI,UAAAd,MAAA3F,GACAqG,EAAAI,UAAAuB,gBAAAD,EAEA,IAAApB,EAAA,SAAAjB,IAAA1F,GAAA,SAAA+H,EAAA,OACAjJ,GAAA,KAAA6H,EAEA7H,GAAA,UAAAuH,EAAAO,uBAAA,GAAApF,KAAA,IAAAmF,EAEAN,EAAAO,uBAAA,GAAArC,MACAzF,GAAA,UAAAuH,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,IAAAmF,EACA7H,GAAA,oBAAAuH,EAAAO,uBAAA,GAAApF,KAAA,IAAA6E,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,QAWA,OANA1C,GAAA,UAAAuH,EAAAO,uBAAA,GAAApF,KAAA,UAAAxF,EAAAM,WAAA,OAEA+J,EAAAI,WAAAJ,EAAAO,uBAAA,GAAArC,MACAzF,GAAA,UAAAuH,EAAAO,uBAAA,GAAArC,IAAA/C,KAAA,UAAAxF,EAAAM,WAAA,QAGAwC,EA2CA,SAAAmJ,EAAAC,EAAAC,GACA,IAAAC,EAAA,CACAnF,OAAA,GACAC,iBAAA,GACAC,cAAA,IAGAkF,EAAA,SAAAzI,EAAAqD,GACArD,EAAA9B,SAAA8B,EAAA,IAEA,QAAAtB,EAAA,EAAmBA,EAAA2E,EAAA1E,OAAmBD,IACtC,GAAA2E,EAAA3E,GAAAe,cAAAO,GAAAqD,EAAA3E,GAAAwB,uBAAAF,EACA,OAAAqD,EAAA3E,IAKAgK,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAE,EAAA7H,WAAA0D,IAAAqE,GACAG,EAAAP,EAAAG,EAAA9H,WAAA0D,IAAAsE,GACA,OAAAC,GAAAC,GAAAD,EAAArJ,KAAAtB,gBAAA4K,EAAAtJ,KAAAtB,eAiDA,OA9CAkK,EAAAjF,OAAAnC,QAAA,SAAA6H,GACA,QAAArK,EAAA,EAAmBA,EAAA6J,EAAAlF,OAAA1E,OAAsCD,IAAA,CACzD,IAAAsK,EAAAT,EAAAlF,OAAA3E,GAEA,GAAAqK,EAAArJ,KAAAtB,gBAAA4K,EAAAtJ,KAAAtB,eAAA2K,EAAApJ,YAAAqJ,EAAArJ,UAAA,CACA,WAAAoJ,EAAArJ,KAAAtB,eAAA2K,EAAAjI,YAAAkI,EAAAlI,WAAA0D,MAGAkE,EAAAK,EAAAC,EAAAV,EAAAjF,OAAAkF,EAAAlF,QACA,UAIA2F,EAAApE,KAAAC,MAAAD,KAAAE,UAAAkE,KAGAnJ,YAAAvD,KAAA2M,IAAAF,EAAAlJ,YAAAmJ,EAAAnJ,aAEA2I,EAAAnF,OAAAlE,KAAA6J,GAEAA,EAAAxH,aAAAwH,EAAAxH,aAAA9D,OAAA,SAAA+D,GACA,QAAAb,EAAA,EAAyBA,EAAAmI,EAAAvH,aAAA7C,OAAgCiC,IACzD,GAAAmI,EAAAvH,aAAAZ,GAAAnC,OAAAgD,EAAAhD,MAAAsK,EAAAvH,aAAAZ,GAAAS,YAAAI,EAAAJ,UACA,SAIA,WAIA,UAIAiH,EAAAhF,iBAAApC,QAAA,SAAAgI,GACA,QAAAxK,EAAA,EAAmBA,EAAA6J,EAAAjF,iBAAA3E,OAAgDD,IAAA,CACnE,IAAAyK,EAAAZ,EAAAjF,iBAAA5E,GAEA,GAAAwK,EAAA5I,MAAA6I,EAAA7I,IAAA,CACAkI,EAAAlF,iBAAAnE,KAAAgK,GACA,UAKAX,EAIA,SAAAY,EAAAC,EAAA5K,EAAA6K,GACA,OASG,IATH,CACAC,MAAA,CACAC,oBAAA,8BACAC,qBAAA,gCAEAC,OAAA,CACAF,oBAAA,4CACAC,qBAAA,8CAEGhL,GAAA4K,GAAA1L,QAAA2L,GAGH,SAAAK,EAAAC,EAAA9L,GAGA,IAAA+L,EAAAD,EAAAE,sBAAAC,KAAA,SAAAC,GACA,OAAAlM,EAAAC,aAAAiM,EAAAjM,YAAAD,EAAAQ,KAAA0L,EAAA1L,IAAAR,EAAAU,OAAAwL,EAAAxL,MAAAV,EAAAO,WAAA2L,EAAA3L,UAAAP,EAAAK,WAAA6L,EAAA7L,UAAAL,EAAAW,OAAAuL,EAAAvL,OAOA,OAJAoL,GACAD,EAAAK,mBAAAnM,IAGA+L,EAGA,SAAAK,EAAAxK,EAAA0D,GACA,IAAA+G,EAAA,IAAAC,MAAAhH,GAUA,OATA+G,EAAAzK,OAEAyK,EAAAE,KAAA,CACAC,kBAAA,EACAC,kBAAA,GACAC,mBAAA,GACAC,eAAAxK,EACAyK,oBAAAzK,GACGP,GACHyK,EAGApC,EAAAC,QAAA,SAAA2C,EAAAC,GAIA,SAAAC,EAAA9E,EAAAD,GACAA,EAAAgF,SAAA/E,GACAD,EAAAiF,cAAA,IAAAJ,EAAAK,sBAAA,YACAjF,WAWA,SAAAkF,EAAAC,EAAAnF,EAAAoF,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,SACAD,EAAAtF,QACAsF,EAAAF,WACAE,EAAA5E,YAAA,CACA0E,YAEAE,EAAAD,UACAT,EAAAY,WAAA,WACAL,EAAAM,eAAA,QAAAH,KAIA,IAAAI,EAAA,SAAAC,GACA,IAAAR,EAAAS,KAEAC,EAAAC,SAAAC,yBAkBA,GAhBA,2DAAA5K,QAAA,SAAA6K,GACAb,EAAAa,GAAAH,EAAAG,GAAAC,KAAAJ,KAEAD,KAAAM,wBAAA,KACAN,KAAAO,iBAAA,EACAP,KAAAQ,aAAA,GACAR,KAAAS,cAAA,GACAT,KAAAU,kBAAA,KACAV,KAAAW,mBAAA,KACAX,KAAArC,eAAA,SACAqC,KAAAY,mBAAA,MACAZ,KAAAa,gBAAA,MACAb,KAAAc,kBAAA,MACAf,EAAA9G,KAAAC,MAAAD,KAAAE,UAAA4G,GAAA,KACAC,KAAAe,YAAA,eAAAhB,EAAAiB,aAEA,cAAAjB,EAAAkB,cACA,MAAA1C,EAAA,kEAKA,OAJKwB,EAAAkB,gBACLlB,EAAAkB,cAAA,WAGAlB,EAAAmB,oBACA,UACA,YACA,MAEA,QACAnB,EAAAmB,mBAAA,MAIA,OAAAnB,EAAAiB,cACA,eACA,iBACA,iBACA,MAEA,QACAjB,EAAAiB,aAAA,WAOA,GAHAjB,EAAAoB,WApOA,SAAAA,EAAAlC,GACA,IAAAmC,GAAA,EAEA,OADAD,EAAAlI,KAAAC,MAAAD,KAAAE,UAAAgI,KACApP,OAAA,SAAAsP,GACA,GAAAA,MAAAC,MAAAD,EAAAE,KAAA,CACA,IAAAD,EAAAD,EAAAC,MAAAD,EAAAE,IAEAF,EAAAE,MAAAF,EAAAC,MACAE,QAAAC,KAAA,qDAGA,IAAAC,EAAA,kBAAAJ,EAkBA,OAhBAI,IACAJ,EAAA,CAAAA,IAGAA,IAAAvP,OAAA,SAAAwP,GAGA,OAFA,IAAAA,EAAAvP,QAAA,eAAAuP,EAAAvP,QAAA,uBAAAuP,EAAAvP,QAAA,WAAAoP,EAOA,IAAAG,EAAAvP,QAAA,UAAAiN,GAAA,YAAAsC,EAAAvP,QAAA,mBAJAoP,GAAA,GACA,YAKAC,EAAAE,IACAF,EAAAC,KAAAI,EAAAJ,EAAA,GAAAA,IACAA,EAAAtO,UAuMA2O,CAAA5B,EAAAoB,YAAA,GAAAlC,GACAe,KAAA4B,cAAA,GAEA7B,EAAA8B,qBACA,QAAA9O,EAAAgN,EAAA8B,qBAA+C9O,EAAA,EAAOA,IACtDiN,KAAA4B,cAAApO,KAAA,IAAAwL,EAAA8C,eAAA,CACAX,WAAApB,EAAAoB,WACAY,aAAAhC,EAAAmB,2BAIAnB,EAAA8B,qBAAA,EAGA7B,KAAAgC,QAAAjC,EAGAC,KAAAiC,aAAA,GACAjC,KAAAkC,cAAAzR,EAAA8J,oBACAyF,KAAAmC,mBAAA,EACAnC,KAAAoC,eAAA9N,EAEA0L,KAAAqC,WAAA,GAGAjN,OAAAkN,eAAAxC,EAAAyC,UAAA,oBACAC,cAAA,EACAC,IAAA,WACA,OAAAzC,KAAAU,qBAGAtL,OAAAkN,eAAAxC,EAAAyC,UAAA,qBACAC,cAAA,EACAC,IAAA,WACA,OAAAzC,KAAAW,sBAIAb,EAAAyC,UAAAG,eAAA,KACA5C,EAAAyC,UAAAI,YAAA,KACA7C,EAAAyC,UAAAK,QAAA,KACA9C,EAAAyC,UAAAM,eAAA,KACA/C,EAAAyC,UAAAO,uBAAA,KACAhD,EAAAyC,UAAAQ,2BAAA,KACAjD,EAAAyC,UAAAS,wBAAA,KACAlD,EAAAyC,UAAAU,0BAAA,KACAnD,EAAAyC,UAAAW,oBAAA,KACApD,EAAAyC,UAAAY,cAAA,KAEArD,EAAAyC,UAAA1C,eAAA,SAAA9L,EAAAqP,GACApD,KAAAqC,YAIArC,KAAAZ,cAAAgE,GAEA,oBAAApD,KAAA,KAAAjM,IACAiM,KAAA,KAAAjM,GAAAqP,KAIAtD,EAAAyC,UAAAc,0BAAA,WACA,IAAAD,EAAA,IAAAzD,MAAA,2BAEAK,KAAAH,eAAA,0BAAAuD,IAGAtD,EAAAyC,UAAAe,iBAAA,WACA,OAAAtD,KAAAgC,SAGAlC,EAAAyC,UAAAgB,gBAAA,WACA,OAAAvD,KAAAQ,cAGAV,EAAAyC,UAAAiB,iBAAA,WACA,OAAAxD,KAAAS,eAKAX,EAAAyC,UAAAkB,mBAAA,SAAAvL,EAAAwL,GACA,IAAAC,EAAA3D,KAAAiC,aAAAjP,OAAA,EACA8H,EAAA,CACAV,MAAA,KACAW,YAAA,KACAkD,aAAA,KACAhD,cAAA,KACA0B,kBAAA,KACAC,mBAAA,KACA1B,UAAA,KACAC,YAAA,KACAjD,OACAxB,IAAA,KACA2E,uBAAA,KACAuI,uBAAA,KACAzJ,OAAA,KACA0J,6BAAA,GACAC,aAAA,GAGA,GAAA9D,KAAAe,aAAA4C,EACA7I,EAAAmD,aAAA+B,KAAAiC,aAAA,GAAAhE,aACAnD,EAAAG,cAAA+E,KAAAiC,aAAA,GAAAhH,kBACK,CACL,IAAA8I,EAAA/D,KAAAgE,8BAEAlJ,EAAAmD,aAAA8F,EAAA9F,aACAnD,EAAAG,cAAA8I,EAAA9I,cAOA,OAJAyI,GACA1D,KAAAiC,aAAAzO,KAAAsH,GAGAA,GAGAgF,EAAAyC,UAAApD,SAAA,SAAA/E,EAAAD,GACA,GAAA6F,KAAAqC,UACA,MAAA9D,EAAA,8EAGA,IAQAzD,EAJA,GAJAkF,KAAAiC,aAAA7D,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAIA,MAAAmE,EAAA,8CAKA,QAAAxL,EAAA,EAAmBA,EAAAiN,KAAAiC,aAAAjP,OAA8BD,IACjDiN,KAAAiC,aAAAlP,GAAAqH,OAAA4F,KAAAiC,aAAAlP,GAAAmF,OAAAkC,EAAAlC,OACA4C,EAAAkF,KAAAiC,aAAAlP,IAiBA,OAbA+H,IACAA,EAAAkF,KAAAyD,mBAAArJ,EAAAlC,OAGA8H,KAAAkE,+BAEA,IAAAlE,KAAAQ,aAAAxO,QAAAmI,IACA6F,KAAAQ,aAAAhN,KAAA2G,GAGAW,EAAAV,QACAU,EAAAX,SACAW,EAAAI,UAAA,IAAA8D,EAAAmF,aAAA/J,EAAAU,EAAAG,eACAH,EAAAI,WAGA4E,EAAAyC,UAAA6B,UAAA,SAAAjK,GACA,IAAAoF,EAAAS,KAEA,GAAAf,GAAA,MACA9E,EAAAkK,YAAA9O,QAAA,SAAA6E,GACAmF,EAAAJ,SAAA/E,EAAAD,SAEK,CAIL,IAAAmK,EAAAnK,EAAAoK,QACApK,EAAAkK,YAAA9O,QAAA,SAAA6E,EAAAoK,GACA,IAAAC,EAAAH,EAAAD,YAAAG,GACApK,EAAAsK,iBAAA,mBAAAtB,GACAqB,EAAAE,QAAAvB,EAAAuB,YAGAL,EAAAD,YAAA9O,QAAA,SAAA6E,GACAmF,EAAAJ,SAAA/E,EAAAkK,OAKAxE,EAAAyC,UAAAqC,YAAA,SAAAC,GACA,GAAA7E,KAAAqC,UACA,MAAA9D,EAAA,iFAGA,KAAAsG,aAAA7F,EAAAmF,cACA,UAAArF,UAAA,0FAGA,IAAAhE,EAAAkF,KAAAiC,aAAA7D,KAAA,SAAA0G,GACA,OAAAA,EAAA5J,YAAA2J,IAGA,IAAA/J,EACA,MAAAyD,EAAA,mEAGA,IAAApE,EAAAW,EAAAX,OACAW,EAAAI,UAAA6J,OACAjK,EAAAI,UAAA,KACAJ,EAAAV,MAAA,KACAU,EAAAX,OAAA,MAMA,IAJA6F,KAAAiC,aAAA7Q,IAAA,SAAA0T,GACA,OAAAA,EAAA3K,SAGAnI,QAAAmI,IAAA6F,KAAAQ,aAAAxO,QAAAmI,IAAA,GACA6F,KAAAQ,aAAAwE,OAAAhF,KAAAQ,aAAAxO,QAAAmI,GAAA,GAGA6F,KAAAkE,+BAGApE,EAAAyC,UAAA0C,aAAA,SAAA9K,GACA,IAAAoF,EAAAS,KACA7F,EAAAkK,YAAA9O,QAAA,SAAA6E,GACA,IAAAyK,EAAAtF,EAAA2F,aAAA9G,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAGAyK,GACAtF,EAAAqF,YAAAC,MAKA/E,EAAAyC,UAAA2C,WAAA,WACA,OAAAlF,KAAAiC,aAAAlQ,OAAA,SAAA+I,GACA,QAAAA,EAAAI,YACK9J,IAAA,SAAA0J,GACL,OAAAA,EAAAI,aAIA4E,EAAAyC,UAAA4C,aAAA,WACA,OAAAnF,KAAAiC,aAAAlQ,OAAA,SAAA+I,GACA,QAAAA,EAAAK,cACK/J,IAAA,SAAA0J,GACL,OAAAA,EAAAK,eAIA2E,EAAAyC,UAAA6C,mBAAA,SAAAC,EAAAtE,GACA,IAAAxB,EAAAS,KAEA,GAAAe,GAAAsE,EAAA,EACA,OAAArF,KAAAiC,aAAA,GAAAlH,YACK,GAAAiF,KAAA4B,cAAA5O,OACL,OAAAgN,KAAA4B,cAAAhQ,QAGA,IAAAmJ,EAAA,IAAAiE,EAAA8C,eAAA,CACAX,WAAAnB,KAAAgC,QAAAb,WACAY,aAAA/B,KAAAgC,QAAAd,qBAoBA,OAlBA9L,OAAAkN,eAAAvH,EAAA,SACA3E,MAAA,MACAkP,UAAA,IAEAtF,KAAAiC,aAAAoD,GAAAE,wBAAA,GAEAvF,KAAAiC,aAAAoD,GAAAG,iBAAA,SAAApC,GACA,IAAAqC,GAAArC,EAAAjR,WAAA,IAAAiD,OAAAC,KAAA+N,EAAAjR,WAAAa,OAGA+H,EAAA2K,MAAAD,EAAA,wBAEA,OAAAlG,EAAA0C,aAAAoD,GAAAE,yBACAhG,EAAA0C,aAAAoD,GAAAE,wBAAA/R,KAAA4P,IAIArI,EAAA2J,iBAAA,iBAAA1E,KAAAiC,aAAAoD,GAAAG,kBACAzK,GAIA+E,EAAAyC,UAAAoD,QAAA,SAAAjP,EAAA2O,GACA,IAAA9F,EAAAS,KACAjF,EAAAiF,KAAAiC,aAAAoD,GAAAtK,YAEA,IAAAA,EAAA6K,iBAAA,CAIA,IAAAL,EAAAvF,KAAAiC,aAAAoD,GAAAE,wBACAvF,KAAAiC,aAAAoD,GAAAE,wBAAA,KACAxK,EAAA8K,oBAAA,iBAAA7F,KAAAiC,aAAAoD,GAAAG,kBAEAzK,EAAA6K,iBAAA,SAAAE,GACA,KAAAvG,EAAAwB,aAAAsE,EAAA,IAOA,IAAAjC,EAAA,IAAAzD,MAAA,gBACAyD,EAAAjR,UAAA,CACA4T,OAAArP,EACA2O,iBAEA,IAAAW,EAAAF,EAAA3T,UAEAsT,GAAAO,GAAA,IAAA5Q,OAAAC,KAAA2Q,GAAAhT,OAEA,GAAAyS,EAGA,QAAA1K,EAAA2K,OAAA,cAAA3K,EAAA2K,QACA3K,EAAA2K,MAAA,iBAEO,CACP,QAAA3K,EAAA2K,QACA3K,EAAA2K,MAAA,aAIAM,EAAA1T,UAAA,EAEA0T,EAAA5S,MAAA2H,EAAAC,qBAAA3H,iBACA,IAAA4S,EAAAxV,EAAA6C,eAAA0S,GACA5C,EAAAjR,UAAAiD,OAAA8Q,OAAA9C,EAAAjR,UAAA1B,EAAAwB,eAAAgU,IACA7C,EAAAjR,oBAAA8T,EAEA7C,EAAAjR,UAAAgU,OAAA,WACA,OACAhU,UAAAiR,EAAAjR,oBACA4T,OAAA3C,EAAAjR,UAAA4T,OACAV,cAAAjC,EAAAjR,UAAAkT,cACAhS,iBAAA+P,EAAAjR,UAAAkB,mBAMA,IAAA3B,EAAAjB,EAAAkB,iBAAA4N,EAAAmB,kBAAAnN,KAKA7B,EAAA0R,EAAAjR,UAAAkT,gBAHAI,EAGA,0BAFA,KAAArC,EAAAjR,oBAAA,OAKAoN,EAAAmB,kBAAAnN,IAAA9C,EAAAgB,eAAA8N,EAAAmB,kBAAAnN,KAAA7B,EAAAgC,KAAA,IACA,IAAA0S,EAAA7G,EAAA0C,aAAAoE,MAAA,SAAAvL,GACA,OAAAA,EAAAC,aAAA,cAAAD,EAAAC,YAAA2K,QAGA,cAAAnG,EAAAuB,oBACAvB,EAAAuB,kBAAA,YAEAvB,EAAA8D,6BAKAoC,GACAlG,EAAAM,eAAA,eAAAuD,GAGAgD,IACA7G,EAAAM,eAAA,mBAAAF,MAAA,iBAEAJ,EAAAuB,kBAAA,WAEAvB,EAAA8D,+BAKArE,EAAAY,WAAA,WACA2F,EAAAhQ,QAAA,SAAAiJ,GACAzD,EAAA6K,iBAAApH,MAEK,KAILsB,EAAAyC,UAAAyB,4BAAA,WACA,IAAAzE,EAAAS,KACA/B,EAAA,IAAAe,EAAAsH,gBAAA,MAEArI,EAAAsI,iBAAA,WACAhH,EAAAiH,4BAEAjH,EAAAkH,0BAGA,IAAAxL,EAAA,IAAA+D,EAAA0H,iBAAAzI,GAgBA,OAdAhD,EAAA0L,kBAAA,WACApH,EAAAkH,0BAGAxL,EAAA2L,QAAA,WAEAxR,OAAAkN,eAAArH,EAAA,SACA7E,MAAA,SACAkP,UAAA,IAGA/F,EAAAkH,0BAGA,CACAxI,eACAhD,kBAMA6E,EAAAyC,UAAAsE,6BAAA,SAAAxB,GACA,IAAAtK,EAAAiF,KAAAiC,aAAAoD,GAAAtK,YAEAA,WACAA,EAAA6K,wBACA5F,KAAAiC,aAAAoD,GAAAtK,aAGA,IAAAkD,EAAA+B,KAAAiC,aAAAoD,GAAApH,aAEAA,WACAA,EAAAsI,wBACAvG,KAAAiC,aAAAoD,GAAApH,cAGA,IAAAhD,EAAA+E,KAAAiC,aAAAoD,GAAApK,cAEAA,WACAA,EAAA0L,yBACA1L,EAAA2L,eACA5G,KAAAiC,aAAAoD,GAAApK,gBAKA6E,EAAAyC,UAAAuE,YAAA,SAAAhM,EAAAiM,EAAAC,GACA,IAAA1R,EAAAoH,EAAA5B,EAAA6B,kBAAA7B,EAAA8B,oBAEAmK,GAAAjM,EAAAI,YACA5F,EAAA2R,UAAAnM,EAAAO,uBACA/F,EAAAuC,KAAA,CACA+B,MAAAnJ,EAAAM,WACAgJ,SAAAe,EAAArB,eAAAM,UAGAe,EAAA8I,uBAAA5Q,SACAsC,EAAAuC,KAAA5B,KAAA6E,EAAA8I,uBAAA,GAAA3N,MAGA6E,EAAAI,UAAA6L,KAAAzR,IAGA0R,GAAAlM,EAAAK,aAAA7F,EAAAoC,OAAA1E,OAAA,IAEA,UAAA8H,EAAA5C,MAAA4C,EAAA8I,wBAAA3E,EAAA,OACAnE,EAAA8I,uBAAArO,QAAA,SAAA2R,UACAA,EAAAlO,MAIA8B,EAAA8I,uBAAA5Q,OACAsC,EAAA2R,UAAAnM,EAAA8I,uBAEAtO,EAAA2R,UAAA,KAGA3R,EAAAuC,KAAA,CACAkC,SAAAe,EAAArB,eAAAM,UAGAe,EAAArB,eAAAG,QACAtE,EAAAuC,KAAA+B,MAAAkB,EAAArB,eAAAG,OAGAkB,EAAAO,uBAAArI,SACAsC,EAAAuC,KAAA5B,KAAA6E,EAAAO,uBAAA,GAAApF,MAGA6E,EAAAK,YAAAgM,QAAA7R,KAIAwK,EAAAyC,UAAA1E,oBAAA,SAAApG,GACA,IAUA/F,EACAoF,EAXAyI,EAAAS,KAEA,2BAAAhO,QAAAyF,EAAA3E,MACA,OAAAsU,QAAAC,OAAA9I,EAAA,iCAAA9G,EAAA3E,KAAA,MAGA,IAAA2K,EAAA,sBAAAhG,EAAA3E,KAAAyM,EAAA5B,iBAAA4B,EAAA8C,UACA,OAAA+E,QAAAC,OAAA9I,EAAA,yCAAA9G,EAAA3E,KAAA,aAAAyM,EAAA5B,iBAMA,aAAAlG,EAAA3E,KAGApB,EAAAjB,EAAAa,cAAAmG,EAAAlE,KACAuD,EAAApF,EAAAE,QACAF,EAAA6D,QAAA,SAAAkB,EAAA4O,GACA,IAAAlN,EAAA1H,EAAA+G,mBAAAf,GACA8I,EAAA0C,aAAAoD,GAAA1I,kBAAAxE,IAEAoH,EAAA0C,aAAA1M,QAAA,SAAAuF,EAAAuK,GACA9F,EAAAoG,QAAA7K,EAAApE,IAAA2O,UAEK,cAAA5N,EAAA3E,KAAA,CACLpB,EAAAjB,EAAAa,cAAAiO,EAAAoB,mBAAApN,KACAuD,EAAApF,EAAAE,QACA,IAAA0V,EAAA7W,EAAAoB,YAAAiF,EAAA,cAAA9D,OAAA,EACAtB,EAAA6D,QAAA,SAAAkB,EAAA4O,GACA,IAAAvK,EAAAyE,EAAA0C,aAAAoD,GACAtK,EAAAD,EAAAC,YACAkD,EAAAnD,EAAAmD,aACAhD,EAAAH,EAAAG,cACA0B,EAAA7B,EAAA6B,kBACAC,EAAA9B,EAAA8B,mBAIA,KAFAnM,EAAA+K,WAAA/E,IAAA,IAAAhG,EAAAoB,YAAA4E,EAAA,iBAAAzD,UAEA8H,EAAAyM,SAAA,CACA,IAAAC,EAAA/W,EAAA2G,iBAAAX,EAAAK,GACA2Q,EAAAhX,EAAAoG,kBAAAJ,EAAAK,GAEAwQ,IACAG,EAAA1Q,KAAA,UAGAwI,EAAAwB,aAAA,IAAAsE,IACA9F,EAAAoG,QAAA7K,EAAApE,IAAA2O,GAEA,QAAApH,EAAAyH,OACAzH,EAAAyJ,MAAA3M,EAAAyM,EAAAF,EAAA,4BAGA,QAAArM,EAAAyK,OACAzK,EAAAyM,MAAAD,IAKA,IAAAnS,EAAAoH,EAAAC,EAAAC,GAGA2C,EAAAuH,YAAAhM,EAAAxF,EAAAoC,OAAA1E,OAAA,SAgBA,OAXAuM,EAAAmB,kBAAA,CACA5N,KAAA2E,EAAA3E,KACAS,IAAAkE,EAAAlE,KAGA,UAAAkE,EAAA3E,KACAyM,EAAAoI,sBAAA,oBAEApI,EAAAoI,sBAAA,UAGAP,QAAAQ,WAGA9H,EAAAyC,UAAAzE,qBAAA,SAAArG,GACA,IAAA8H,EAAAS,KAEA,2BAAAhO,QAAAyF,EAAA3E,MACA,OAAAsU,QAAAC,OAAA9I,EAAA,iCAAA9G,EAAA3E,KAAA,MAGA,IAAA2K,EAAA,uBAAAhG,EAAA3E,KAAAyM,EAAA5B,iBAAA4B,EAAA8C,UACA,OAAA+E,QAAAC,OAAA9I,EAAA,0CAAA9G,EAAA3E,KAAA,aAAAyM,EAAA5B,iBAGA,IAAA8B,EAAA,GACAF,EAAAkB,cAAAlL,QAAA,SAAA4E,GACAsF,EAAAtF,EAAA1F,IAAA0F,IAEA,IAAA0N,EAAA,GACAnW,EAAAjB,EAAAa,cAAAmG,EAAAlE,KACAuD,EAAApF,EAAAE,QACA0V,EAAA7W,EAAAoB,YAAAiF,EAAA,cAAA9D,OAAA,EACA+N,EAAAtQ,EAAAoB,YAAAiF,EAAA,mBAAA9D,OAAA,EACAuM,EAAAwB,cACA,IAAA+G,EAAArX,EAAAoB,YAAAiF,EAAA,qBAmTA,OAhTAyI,EAAAe,0BADAwH,GACAA,EAAAhX,OAAA,IAAAK,MAAA,KAAAa,QAAA,cAKAN,EAAA6D,QAAA,SAAAkB,EAAA4O,GACA,IAAAzP,EAAAnF,EAAAO,WAAAyF,GACAyB,EAAAzH,EAAA8K,QAAA9E,GAEA8Q,EAAA9W,EAAA+K,WAAA/E,IAAA,IAAAhG,EAAAoB,YAAA4E,EAAA,iBAAAzD,OACAR,EAAAoD,EAAA,GAAA9E,OAAA,GAAAK,MAAA,QACAuD,EAAAjE,EAAA6K,aAAA7E,EAAAK,GACAiR,EAAAtX,EAAAwJ,UAAAxD,GACAC,EAAAjG,EAAA+F,OAAAC,IAAAhG,EAAAC,qBAEA,GAAA6W,GAAA,gBAAArP,IAAA,cAAA1F,GAAA,kBAAAA,GAGA+M,EAAA0C,aAAAoD,GAAA,CACA3O,MACAwB,OACA1F,WACA+U,UAAA,OAPA,CAiBA,IAAAzM,EACAC,EACAkD,EACAhD,EACAE,EACAE,EACAuI,EACAjH,EACAvC,GAbAmN,GAAAhI,EAAA0C,aAAAoD,IAAA9F,EAAA0C,aAAAoD,GAAAkC,WAEAhI,EAAA0C,aAAAoD,GAAA9F,EAAAkE,mBAAAvL,GAAA,IAaA,IACAsP,EACAC,EAFA7K,EAAAnM,EAAA+G,mBAAAf,GAIA8Q,IACAC,EAAA/W,EAAA2G,iBAAAX,EAAAK,IACA2Q,EAAAhX,EAAAoG,kBAAAJ,EAAAK,IACAC,KAAA,UAGA6M,EAAAnT,EAAA6H,2BAAA7B,GACA,IAAAgD,EAAAhJ,EAAA+I,oBAAA/C,GACAuR,EAAAvX,EAAAoB,YAAA4E,EAAA,sBAAAK,GAAA9D,OAAA,EACAiV,EAAAxX,EAAAoB,YAAA4E,EAAA,gBAAArF,IAAA,SAAA4U,GACA,OAAAvV,EAAAwB,eAAA+T,KACOjU,OAAA,SAAAiU,GACP,WAAAA,EAAA1T,YAmBA,IAhBA,UAAAmF,EAAA3E,MAAA,WAAA2E,EAAA3E,QAAAyU,GAAAxG,GAAAsE,EAAA,GAAA9F,EAAA0C,aAAAoD,KACA9F,EAAAsH,6BAAAxB,GAEA9F,EAAA0C,aAAAoD,GAAAtK,YAAAwE,EAAA0C,aAAA,GAAAlH,YACAwE,EAAA0C,aAAAoD,GAAApH,aAAAsB,EAAA0C,aAAA,GAAAhE,aACAsB,EAAA0C,aAAAoD,GAAApK,cAAAsE,EAAA0C,aAAA,GAAAhH,cAEAsE,EAAA0C,aAAAoD,GAAAnK,WACAqE,EAAA0C,aAAAoD,GAAAnK,UAAAgN,aAAA3I,EAAA0C,aAAA,GAAAhH,eAGAsE,EAAA0C,aAAAoD,GAAAlK,aACAoE,EAAA0C,aAAAoD,GAAAlK,YAAA+M,aAAA3I,EAAA0C,aAAA,GAAAhH,gBAIA,UAAAxD,EAAA3E,MAAAyU,GA+FO,cAAA9P,EAAA3E,OAAAyU,EAAA,CAEPxM,GADAD,EAAAyE,EAAA0C,aAAAoD,IACAtK,YACAkD,EAAAnD,EAAAmD,aACAhD,EAAAH,EAAAG,cACAE,EAAAL,EAAAK,YACAE,EAAAP,EAAAO,uBACAsB,EAAA7B,EAAA6B,kBACA4C,EAAA0C,aAAAoD,GAAAzB,yBACArE,EAAA0C,aAAAoD,GAAAzI,qBACA2C,EAAA0C,aAAAoD,GAAA5L,iBAEAwO,EAAAjV,QAAA,QAAAiL,EAAAyH,SACA4B,IAAAU,GAAAjH,GAAA,IAAAsE,EAGA4C,EAAA1S,QAAA,SAAApD,GACA6L,EAAAlD,EAAAmD,aAAA9L,KAHA8L,EAAAkK,oBAAAF,IAQAlH,GAAA,IAAAsE,IACA,QAAApH,EAAAyH,OACAzH,EAAAyJ,MAAA3M,EAAAyM,EAAA,eAGA,QAAAvM,EAAAyK,OACAzK,EAAAyM,MAAAD,KAMA/K,EAAA5B,EAAA6B,kBAAA7B,EAAA8B,oBACAlF,OAAA3F,OAAA,SAAAqW,GACA,cAAAA,EAAArU,KAAAtB,gBACSO,QAET8H,EAAAO,uBAAA,GAAArC,YACA8B,EAAAO,uBAAA,GAAArC,IAGAuG,EAAAuH,YAAAhM,EAAA,aAAApG,GAAA,aAAAA,EAAA,aAAAA,GAAA,aAAAA,IAGAyG,GAAA,aAAAzG,GAAA,aAAAA,SAoBAoG,EAAAK,aAnBAf,EAAAe,EAAAf,MAEA2N,GACAtI,EAAAsI,EAAA5N,UACAsF,EAAAsI,EAAA5N,QAAA,IAAA6E,EAAAqJ,aAGAnJ,EAAA9E,EAAAqF,EAAAsI,EAAA5N,SACA0N,EAAArU,KAAA,CAAA4G,EAAAe,EAAAsE,EAAAsI,EAAA5N,YAEAsF,EAAA6I,UACA7I,EAAA6I,QAAA,IAAAtJ,EAAAqJ,aAGAnJ,EAAA9E,EAAAqF,EAAA6I,SACAT,EAAArU,KAAA,CAAA4G,EAAAe,EAAAsE,EAAA6I,iBA7JA,EACAxN,EAAAyE,EAAA0C,aAAAoD,IAAA9F,EAAAkE,mBAAAvL,IACAxB,MAEAoE,EAAAC,cACAD,EAAAC,YAAAwE,EAAA6F,mBAAAC,EAAAtE,IAGAkH,EAAAjV,QAAA,QAAA8H,EAAAmD,aAAAyH,SACAsC,GAAAjH,GAAA,IAAAsE,EAGA4C,EAAA1S,QAAA,SAAApD,GACA6L,EAAAlD,EAAAmD,aAAA9L,KAHA2I,EAAAmD,aAAAkK,oBAAAF,IAQAtL,EAAAqC,EAAAuJ,eAAAC,gBAAAtQ,GAGA+G,EAAA,QACAtC,EAAAjF,OAAAiF,EAAAjF,OAAA3F,OAAA,SAAAqC,GACA,cAAAA,EAAAL,QAIAsH,EAAAP,EAAAO,wBAAA,EACApF,KAAA,QAAAoP,EAAA,KAGA,IAOAlL,EAPAsO,GAAA,EAEA,gBAAA/T,GAAA,aAAAA,GAIA,GAHA+T,GAAA3N,EAAAK,YACAA,EAAAL,EAAAK,aAAA,IAAA6D,EAAAuJ,eAAAzN,EAAAG,cAAA/C,GAEAuQ,EAEArO,EAAAe,EAAAf,MAEA2N,GAAA,MAAAA,EAAA5N,SACa4N,GACbtI,EAAAsI,EAAA5N,UACAsF,EAAAsI,EAAA5N,QAAA,IAAA6E,EAAAqJ,YACAjT,OAAAkN,eAAA7C,EAAAsI,EAAA5N,QAAA,MACAsI,IAAA,WACA,OAAAsF,EAAA5N,WAKA/E,OAAAkN,eAAAlI,EAAA,MACAqI,IAAA,WACA,OAAAsF,EAAA3N,SAGAD,EAAAsF,EAAAsI,EAAA5N,UAEAsF,EAAA6I,UACA7I,EAAA6I,QAAA,IAAAtJ,EAAAqJ,aAGAlO,EAAAsF,EAAA6I,UAGAnO,IACA+E,EAAA9E,EAAAD,GACAW,EAAA+I,6BAAArQ,KAAA2G,IAGA0N,EAAArU,KAAA,CAAA4G,EAAAe,EAAAhB,SAESW,EAAAK,aAAAL,EAAAK,YAAAf,QACTU,EAAA+I,6BAAAtO,QAAA,SAAA0O,GACA,IA5yBA7J,EAAAD,EA4yBAuO,EAAAzE,EAAAI,YAAAjG,KAAA,SAAA0G,GACA,OAAAA,EAAArQ,KAAAqG,EAAAK,YAAAf,MAAA3F,KAGAiU,IAhzBAtO,EAizBAsO,GAjzBAvO,EAizBA8J,GAhzBAW,YAAAxK,GACAD,EAAAiF,cAAA,IAAAJ,EAAAK,sBAAA,eACAjF,cAizBAU,EAAA+I,6BAAA,IAGA/I,EAAA6B,oBACA7B,EAAA8B,qBACA9B,EAAAK,cACAL,EAAArB,iBACAqB,EAAAO,yBACAP,EAAA8I,yBAGArE,EAAAuH,YAAAvH,EAAA0C,aAAAoD,IAAA,EAAAoD,YAwEAnU,IAAAiL,EAAA6C,YACA7C,EAAA6C,UAAA,UAAA3K,EAAA3E,KAAA,oBAGAyM,EAAAoB,mBAAA,CACA7N,KAAA2E,EAAA3E,KACAS,IAAAkE,EAAAlE,KAGA,UAAAkE,EAAA3E,KACAyM,EAAAoI,sBAAA,qBAEApI,EAAAoI,sBAAA,UAGAvS,OAAAC,KAAAoK,GAAAlK,QAAA,SAAAoT,GACA,IAAAxO,EAAAsF,EAAAkJ,GAEA,GAAAxO,EAAAkK,YAAArR,OAAA,CACA,QAAAuM,EAAAkB,cAAAzO,QAAAmI,GAAA,CACAoF,EAAAkB,cAAAjN,KAAA2G,GACA,IAAAiJ,EAAA,IAAAzD,MAAA,aACAyD,EAAAjJ,SACA6E,EAAAY,WAAA,WACAL,EAAAM,eAAA,YAAAuD,KAIAyE,EAAAtS,QAAA,SAAAqT,GACA,IAAAxO,EAAAwO,EAAA,GACApJ,EAAAoJ,EAAA,GAEAzO,EAAA1F,KAAAmU,EAAA,GAAAnU,IAIA6K,EAAAC,EAAAnF,EAAAoF,EAAA,CAAArF,SAIA0N,EAAAtS,QAAA,SAAAqT,GACAA,EAAA,IAIAtJ,EAAAC,EAAAqJ,EAAA,GAAAA,EAAA,SAIA5J,EAAAY,WAAA,WACAL,KAAA0C,cAIA1C,EAAA0C,aAAA1M,QAAA,SAAAuF,GACAA,EAAAmD,cAAA,QAAAnD,EAAAmD,aAAAyH,OAAA5K,EAAAmD,aAAAE,sBAAAnL,OAAA,IACAwO,QAAAC,KAAA,sFACA3G,EAAAmD,aAAAK,mBAAA,QAGK,KACL8I,QAAAQ,WAGA9H,EAAAyC,UAAAsG,MAAA,WACA7I,KAAAiC,aAAA1M,QAAA,SAAAuF,GAMAA,EAAAmD,cACAnD,EAAAmD,aAAA8G,OAGAjK,EAAAG,eACAH,EAAAG,cAAA8J,OAGAjK,EAAAI,WACAJ,EAAAI,UAAA6J,OAGAjK,EAAAK,aACAL,EAAAK,YAAA4J,SAIA/E,KAAAqC,WAAA,EAEArC,KAAA2H,sBAAA,WAIA7H,EAAAyC,UAAAoF,sBAAA,SAAAmB,GACA9I,KAAArC,eAAAmL,EACA,IAAA1F,EAAA,IAAAzD,MAAA,wBAEAK,KAAAH,eAAA,uBAAAuD,IAIAtD,EAAAyC,UAAA2B,4BAAA,WACA,IAAA3E,EAAAS,KAEA,WAAAA,KAAArC,iBAAA,IAAAqC,KAAAO,kBAIAP,KAAAO,iBAAA,EACAvB,EAAAY,WAAA,WACA,GAAAL,EAAAgB,gBAAA,CACAhB,EAAAgB,iBAAA,EACA,IAAA6C,EAAA,IAAAzD,MAAA,qBAEAJ,EAAAM,eAAA,oBAAAuD,KAEK,KAILtD,EAAAyC,UAAAiE,0BAAA,WACA,IAAAsC,EACAC,EAAA,CACAC,IAAA,EACAC,OAAA,EACAC,SAAA,EACAC,UAAA,EACAC,UAAA,EACAC,aAAA,EACAC,OAAA,GAuBA,GArBAtJ,KAAAiC,aAAA1M,QAAA,SAAAuF,GACAA,EAAAmD,eAAAnD,EAAAyM,UACAwB,EAAAjO,EAAAmD,aAAAyH,WAGAoD,EAAA,MAEAC,EAAAO,OAAA,EACAR,EAAA,SACKC,EAAAG,SAAA,EACLJ,EAAA,WACKC,EAAAM,aAAA,EACLP,EAAA,eACKC,EAAAC,IAAA,EACLF,EAAA,MACKC,EAAAI,UAAA,EACLL,EAAA,YACKC,EAAAK,UAAA,IACLN,EAAA,aAGAA,IAAA9I,KAAAY,mBAAA,CACAZ,KAAAY,mBAAAkI,EACA,IAAA1F,EAAA,IAAAzD,MAAA,4BAEAK,KAAAH,eAAA,2BAAAuD,KAKAtD,EAAAyC,UAAAkE,uBAAA,WACA,IAAAqC,EACAC,EAAA,CACAC,IAAA,EACAC,OAAA,EACAM,WAAA,EACAJ,UAAA,EACAC,UAAA,EACAC,aAAA,EACAC,OAAA,GAwBA,GAtBAtJ,KAAAiC,aAAA1M,QAAA,SAAAuF,GACAA,EAAAmD,cAAAnD,EAAAG,gBAAAH,EAAAyM,WACAwB,EAAAjO,EAAAmD,aAAAyH,SACAqD,EAAAjO,EAAAG,cAAAyK,YAIAqD,EAAAI,WAAAJ,EAAAK,UACAN,EAAA,MAEAC,EAAAO,OAAA,EACAR,EAAA,SACKC,EAAAQ,WAAA,EACLT,EAAA,aACKC,EAAAM,aAAA,EACLP,EAAA,eACKC,EAAAC,IAAA,EACLF,EAAA,MACKC,EAAAI,UAAA,IACLL,EAAA,aAGAA,IAAA9I,KAAAa,gBAAA,CACAb,KAAAa,gBAAAiI,EACA,IAAA1F,EAAA,IAAAzD,MAAA,yBAEAK,KAAAH,eAAA,wBAAAuD,KAIAtD,EAAAyC,UAAAiH,YAAA,WACA,IAAAjK,EAAAS,KAEA,GAAAT,EAAA8C,UACA,OAAA+E,QAAAC,OAAA9I,EAAA,6DAGA,IAAAkL,EAAAlK,EAAA0C,aAAAlQ,OAAA,SAAA+S,GACA,gBAAAA,EAAA5M,OACKlF,OACL0W,EAAAnK,EAAA0C,aAAAlQ,OAAA,SAAA+S,GACA,gBAAAA,EAAA5M,OACKlF,OAEL2W,EAAAC,UAAA,GAEA,GAAAD,EAAA,CAEA,GAAAA,EAAAE,WAAAF,EAAAG,SACA,UAAAhL,UAAA,6DAGAxK,IAAAqV,EAAAI,sBAEAN,GADA,IAAAE,EAAAI,oBACA,GACS,IAAAJ,EAAAI,oBACT,EAEAJ,EAAAI,0BAIAzV,IAAAqV,EAAAK,sBAEAN,GADA,IAAAC,EAAAK,oBACA,GACS,IAAAL,EAAAK,oBACT,EAEAL,EAAAK,qBAqBA,IAhBAzK,EAAA0C,aAAA1M,QAAA,SAAAuF,GACA,UAAAA,EAAA5C,OACAuR,EAEA,IACA3O,EAAAgJ,aAAA,GAEO,UAAAhJ,EAAA5C,QACPwR,EAEA,IACA5O,EAAAgJ,aAAA,KAKA2F,EAAA,GAAAC,EAAA,GACAD,EAAA,IACAlK,EAAAkE,mBAAA,SAEAgG,KAGAC,EAAA,IACAnK,EAAAkE,mBAAA,SAEAiG,KAIA,IAAAnW,EAAA9C,EAAA+J,wBAAA+E,EAAA2C,cAAA3C,EAAA4C,sBACA5C,EAAA0C,aAAA1M,QAAA,SAAAuF,EAAAuK,GAGA,IAAAjL,EAAAU,EAAAV,MACAlC,EAAA4C,EAAA5C,KACAxB,EAAAoE,EAAApE,KAAAjG,EAAAC,qBACAoK,EAAApE,MAEAoE,EAAAC,cACAD,EAAAC,YAAAwE,EAAA6F,mBAAAC,EAAA9F,EAAAwB,cAGA,IAAApE,EAAAqC,EAAAmF,aAAAqE,gBAAAtQ,GAGA+G,EAAA,QACAtC,EAAAjF,OAAAiF,EAAAjF,OAAA3F,OAAA,SAAAqC,GACA,cAAAA,EAAAL,QAIA4I,EAAAjF,OAAAnC,QAAA,SAAAnB,GAGA,SAAAA,EAAAL,WAAAO,IAAAF,EAAAe,WAAA,6BACAf,EAAAe,WAAA,gCAKA2F,EAAA8B,oBAAA9B,EAAA8B,mBAAAlF,QACAoD,EAAA8B,mBAAAlF,OAAAnC,QAAA,SAAA0U,GACA7V,EAAAL,KAAAtB,gBAAAwX,EAAAlW,KAAAtB,eAAA2B,EAAAJ,YAAAiW,EAAAjW,YACAI,EAAAG,qBAAA0V,EAAAnW,iBAKA6I,EAAAhF,iBAAApC,QAAA,SAAA2U,IACApP,EAAA8B,oBAAA9B,EAAA8B,mBAAAjF,kBAAA,IACApC,QAAA,SAAA4U,GACAD,EAAAvV,MAAAwV,EAAAxV,MACAuV,EAAAzV,GAAA0V,EAAA1V,QAKA,IAAA4G,EAAAP,EAAAO,wBAAA,EACApF,KAAA,QAAAoP,EAAA,KAGAjL,GAEA6E,GAAA,iBAAA/G,IAAAmD,EAAA,GAAArC,MACAqC,EAAA,GAAArC,IAAA,CACA/C,KAAAoF,EAAA,GAAApF,KAAA,IAKA6E,EAAAgJ,cACAhJ,EAAAK,YAAA,IAAA6D,EAAAuJ,eAAAzN,EAAAG,cAAA/C,IAGA4C,EAAA6B,oBACA7B,EAAAO,2BAGA,eAAAkE,EAAAyC,QAAAhB,eACAzN,GAAA,kBAAAgM,EAAA0C,aAAA7Q,IAAA,SAAA0T,GACA,OAAAA,EAAApO,MACOhD,KAAA,aAGPH,GAAA,4BACAgM,EAAA0C,aAAA1M,QAAA,SAAAuF,EAAAuK,GACA9R,GAAAsH,EAAAC,IAAA6B,kBAAA,QAAA7B,EAAAX,OAAAoF,EAAA6C,WACA7O,GAAA,oBAEAuH,EAAAC,aAAA,QAAAwE,EAAAuB,mBAAA,IAAAuE,GAAA9F,EAAAwB,cACAjG,EAAAC,YAAAqP,qBAAA7U,QAAA,SAAAyQ,GACAA,EAAA1T,UAAA,EACAiB,GAAA,KAAA9C,EAAA6C,eAAA0S,GAAA,SAGA,cAAAlL,EAAAC,YAAA2K,QACAnS,GAAA,8BAIA,IAAA8W,EAAA,IAAArL,EAAAsL,sBAAA,CACAxX,KAAA,QACAS,QAEA,OAAA6T,QAAAQ,QAAAyC,IAGAvK,EAAAyC,UAAAgI,aAAA,WACA,IAAAhL,EAAAS,KAEA,GAAAT,EAAA8C,UACA,OAAA+E,QAAAC,OAAA9I,EAAA,8DAGA,yBAAAgB,EAAA5B,gBAAA,wBAAA4B,EAAA5B,eACA,OAAAyJ,QAAAC,OAAA9I,EAAA,mEAAAgB,EAAA5B,iBAGA,IAAApK,EAAA9C,EAAA+J,wBAAA+E,EAAA2C,cAAA3C,EAAA4C,sBAEA5C,EAAAwB,cACAxN,GAAA,kBAAAgM,EAAA0C,aAAA7Q,IAAA,SAAA0T,GACA,OAAAA,EAAApO,MACOhD,KAAA,aAGPH,GAAA,4BACA,IAAAiX,EAAA/Z,EAAAkB,iBAAA4N,EAAAoB,mBAAApN,KAAAP,OACAuM,EAAA0C,aAAA1M,QAAA,SAAAuF,EAAAuK,GACA,KAAAA,EAAA,EAAAmF,GAAA,CAIA,GAAA1P,EAAAyM,SAeA,MAdA,gBAAAzM,EAAA5C,KACA,cAAA4C,EAAAtI,SAEAe,GAAA,qCAEAA,GAAA,mBAAAuH,EAAAtI,SAAA,0BAES,UAAAsI,EAAA5C,KACT3E,GAAA,4DACS,UAAAuH,EAAA5C,OACT3E,GAAA,sEAGAA,GAAA,2CAAAuH,EAAApE,IAAA,QAMA,IAAA+T,EADA,GAAA3P,EAAAX,OAGA,UAAAW,EAAA5C,KACAuS,EAAA3P,EAAAX,OAAAuQ,iBAAA,GACS,UAAA5P,EAAA5C,OACTuS,EAAA3P,EAAAX,OAAAwQ,iBAAA,IAGAF,GAEAxL,GAAA,iBAAAnE,EAAA5C,OAAA4C,EAAAO,uBAAA,GAAArC,MACA8B,EAAAO,uBAAA,GAAArC,IAAA,CACA/C,KAAA6E,EAAAO,uBAAA,GAAApF,KAAA,IAOA,IAAA4G,EAAAH,EAAA5B,EAAA6B,kBAAA7B,EAAA8B,qBACAC,EAAAnF,OAAA3F,OAAA,SAAAqW,GACA,cAAAA,EAAArU,KAAAtB,gBACOO,QAEP8H,EAAAO,uBAAA,GAAArC,YACA8B,EAAAO,uBAAA,GAAArC,IAGAzF,GAAAsH,EAAAC,EAAA+B,EAAA,SAAA/B,EAAAX,OAAAoF,EAAA6C,WAEAtH,EAAArB,gBAAAqB,EAAArB,eAAAK,cACAvG,GAAA,uBAGA,IAAA8W,EAAA,IAAArL,EAAAsL,sBAAA,CACAxX,KAAA,SACAS,QAEA,OAAA6T,QAAAQ,QAAAyC,IAGAvK,EAAAyC,UAAAqI,gBAAA,SAAAzY,GACA,IACAT,EADA6N,EAAAS,KAGA,OAAA7N,QAAAmC,IAAAnC,EAAAkT,gBAAAlT,EAAA4T,OACAqB,QAAAC,OAAA,IAAAvI,UAAA,qCAIA,IAAAsI,QAAA,SAAAQ,EAAAP,GACA,IAAA9H,EAAAoB,mBACA,OAAA0G,EAAA9I,EAAA,+EACO,GAAApM,GAAA,KAAAA,YAeA,CACP,IAAAkT,EAAAlT,EAAAkT,cAEA,GAAAlT,EAAA4T,OACA,QAAAhT,EAAA,EAAyBA,EAAAwM,EAAA0C,aAAAjP,OAA4BD,IACrD,GAAAwM,EAAA0C,aAAAlP,GAAA2D,MAAAvE,EAAA4T,OAAA,CACAV,EAAAtS,EACA,MAKA,IAAA+H,EAAAyE,EAAA0C,aAAAoD,GAEA,IAAAvK,EAmCA,OAAAuM,EAAA9I,EAAA,+CAlCA,GAAAzD,EAAAyM,SACA,OAAAK,IAGA,IAAA5B,EAAA5Q,OAAAC,KAAAlD,aAAAa,OAAA,EAAAvC,EAAAwB,eAAAE,aAAA,GAEA,WAAA6T,EAAAxT,WAAA,IAAAwT,EAAAnT,MAAA,IAAAmT,EAAAnT,MACA,OAAA+U,IAIA,GAAA5B,EAAA1T,WAAA,IAAA0T,EAAA1T,UACA,OAAAsV,IAKA,QAAAvC,KAAA,GAAAvK,EAAAmD,eAAAsB,EAAA0C,aAAA,GAAAhE,gBACAD,EAAAlD,EAAAmD,aAAA+H,GACA,OAAAqB,EAAA9I,EAAA,+CAKA,IAAAsM,EAAA1Y,YAAAjB,OAEA,IAAA2Z,EAAA7Y,QAAA,QACA6Y,IAAA/Z,OAAA,KAGAY,EAAAjB,EAAAkB,iBAAA4N,EAAAoB,mBAAApN,MACA8R,IAAA,MAAAW,EAAAlT,KAAA+X,EAAA,4BACAtL,EAAAoB,mBAAApN,IAAA9C,EAAAgB,eAAA8N,EAAAoB,mBAAApN,KAAA7B,EAAAgC,KAAA,SA7DA,QAAAuB,EAAA,EAAuBA,EAAAsK,EAAA0C,aAAAjP,SACvBuM,EAAA0C,aAAAhN,GAAAsS,WAIAhI,EAAA0C,aAAAhN,GAAAgJ,aAAAK,mBAAA,KACA5M,EAAAjB,EAAAkB,iBAAA4N,EAAAoB,mBAAApN,MACA0B,IAAA,0BACAsK,EAAAoB,mBAAApN,IAAA9C,EAAAgB,eAAA8N,EAAAoB,mBAAApN,KAAA7B,EAAAgC,KAAA,KAEA6L,EAAAwB,cAVmD9L,KAmEnD2S,OAIA9H,EAAAyC,UAAAuI,SAAA,SAAAC,GACA,GAAAA,gBAAA/L,EAAAgM,iBAAA,CACA,IAAAC,EAAA,KASA,GARAjL,KAAAiC,aAAA1M,QAAA,SAAAuF,GACAA,EAAAI,WAAAJ,EAAAI,UAAAd,QAAA2Q,EACAE,EAAAnQ,EAAAI,UACSJ,EAAAK,aAAAL,EAAAK,YAAAf,QAAA2Q,IACTE,EAAAnQ,EAAAK,gBAIA8P,EACA,MAAA1M,EAAA,0CAGA,OAAA0M,EAAAH,WAGA,IAAAI,EAAA,GAQA,OAPAlL,KAAAiC,aAAA1M,QAAA,SAAAuF,GACA,yEAAAvF,QAAA,SAAA6K,GACAtF,EAAAsF,IACA8K,EAAA1X,KAAAsH,EAAAsF,GAAA0K,gBAIA1D,QAAA+D,IAAAD,GAAAE,KAAA,SAAAC,GACA,IAAAC,EAAA,IAAAC,IAMA,OALAF,EAAA9V,QAAA,SAAAiW,GACAA,EAAAjW,QAAA,SAAAkW,GACAH,EAAAI,IAAAD,EAAAhX,GAAAgX,OAGAH,KAKA,wFACA/V,QAAA,SAAAoW,GACA,IAAAhS,EAAAqF,EAAA2M,GAEA,GAAAhS,KAAA4I,WAAA5I,EAAA4I,UAAAuI,SAAA,CACA,IAAAc,EAAAjS,EAAA4I,UAAAuI,SAEAnR,EAAA4I,UAAAuI,SAAA,WACA,OAAAc,EAAAC,MAAA7L,MAAAoL,KAAA,SAAAU,GACA,IAAAC,EAAA,IAAAR,IAKA,OAJAnW,OAAAC,KAAAyW,GAAAvW,QAAA,SAAAd,GAlrDA,IAAAgX,EAmrDAK,EAAArX,GAAA3B,KAlrDA,CACAkZ,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAC,eAAA,kBACAC,gBAAA,qBANAX,EAmrDAK,EAAArX,IA5qDG3B,OAAA2Y,EAAA3Y,KA6qDHiZ,EAAAL,IAAAjX,EAAAqX,EAAArX,MAEAsX,QAMA,IAAAM,EAAA,+BAiEA,OAhEAA,EAAA9W,QAAA,SAAA6K,GACA,IAAAkM,EAAAxM,EAAAyC,UAAAnC,GAEAN,EAAAyC,UAAAnC,GAAA,WACA,IAAAmM,EAAA3C,UAEA,0BAAA2C,EAAA,wBAAAA,EAAA,GAEAD,EAAAT,MAAA7L,KAAA,CAAA4J,UAAA,KAAAwB,KAAA,SAAA3T,GACA,oBAAA8U,EAAA,IACAA,EAAA,GAAAV,MAAA,MAAApU,KAES,SAAA+U,GACT,oBAAAD,EAAA,IACAA,EAAA,GAAAV,MAAA,MAAAW,MAKAF,EAAAT,MAAA7L,KAAA4J,eAGAyC,EAAA,kEACA9W,QAAA,SAAA6K,GACA,IAAAkM,EAAAxM,EAAAyC,UAAAnC,GAEAN,EAAAyC,UAAAnC,GAAA,WACA,IAAAmM,EAAA3C,UAEA,0BAAA2C,EAAA,wBAAAA,EAAA,GAEAD,EAAAT,MAAA7L,KAAA4J,WAAAwB,KAAA,WACA,oBAAAmB,EAAA,IACAA,EAAA,GAAAV,MAAA,OAES,SAAAW,GACT,oBAAAD,EAAA,IACAA,EAAA,GAAAV,MAAA,MAAAW,MAKAF,EAAAT,MAAA7L,KAAA4J,cAKA,aAAArU,QAAA,SAAA6K,GACA,IAAAkM,EAAAxM,EAAAyC,UAAAnC,GAEAN,EAAAyC,UAAAnC,GAAA,WACA,IAAAmM,EAAA3C,UAEA,0BAAA2C,EAAA,GACAD,EAAAT,MAAA7L,KAAA4J,WAAAwB,KAAA,WACA,oBAAAmB,EAAA,IACAA,EAAA,GAAAV,MAAA,QAKAS,EAAAT,MAAA7L,KAAA4J,cAGA9J,04DC9vDA2M,GAAA,EACAC,GAAA,EAUO,SAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAC,EAAAH,EAAAG,MAAAF,GACA,OAAAE,KAAA/Z,QAAA8Z,GAAAva,SAAAwa,EAAAD,GAAA,IAKO,SAAAE,EAAAhO,EAAAiO,EAAAC,GACP,GAAAlO,EAAAc,kBAAA,CAIA,IAAAqN,EAAAnO,EAAAc,kBAAAyC,UACA6K,EAAAD,EAAAzI,iBAEAyI,EAAAzI,iBAAA,SAAA2I,EAAAC,GACA,GAAAD,IAAAJ,EACA,OAAAG,EAAAvB,MAAA7L,KAAA4J,WAGA,IAAA2D,EAAA,SAAA/O,GACA,IAAAgP,EAAAN,EAAA1O,GAEAgP,GACAF,EAAAE,IAMA,OAFAxN,KAAAyN,UAAAzN,KAAAyN,WAAA,GACAzN,KAAAyN,UAAAH,GAAAC,EACAH,EAAAvB,MAAA7L,KAAA,CAAAqN,EAAAE,KAGA,IAAAG,EAAAP,EAAAtH,oBAEAsH,EAAAtH,oBAAA,SAAAwH,EAAAC,GACA,GAAAD,IAAAJ,IAAAjN,KAAAyN,YAAAzN,KAAAyN,UAAAH,GACA,OAAAI,EAAA7B,MAAA7L,KAAA4J,WAGA,IAAA+D,EAAA3N,KAAAyN,UAAAH,GAEA,cADAtN,KAAAyN,UAAAH,GACAI,EAAA7B,MAAA7L,KAAA,CAAAqN,EAAAM,KAGAvY,OAAAkN,eAAA6K,EAAA,KAAAF,EAAA,CACAxK,IAAA,WACA,OAAAzC,KAAA,MAAAiN,IAEAvB,IAAA,SAAA4B,GACAtN,KAAA,MAAAiN,KACAjN,KAAA6F,oBAAAoH,EAAAjN,KAAA,MAAAiN,WACAjN,KAAA,MAAAiN,IAGAK,GACAtN,KAAA0E,iBAAAuI,EAAAjN,KAAA,MAAAiN,GAAAK,IAGAM,YAAA,EACApL,cAAA,KAGO,SAAAqL,EAAAC,GACP,yBAAAA,EACA,IAAArP,MAAA,yBAAAqP,EAAA,4BAGArB,EAAAqB,EACAA,EAAA,4DAOO,SAAAC,EAAAD,GACP,yBAAAA,EACA,IAAArP,MAAA,yBAAAqP,EAAA,4BAGApB,GAAAoB,EACA,oCAAAA,EAAA,uBAEO,SAAAE,IACP,qBAAAhP,OAAA,CACA,GAAAyN,EACA,OAGA,qBAAAjL,SAAA,oBAAAA,QAAAwM,KACAxM,QAAAwM,IAAAnC,MAAArK,QAAAoI,YAQO,SAAAqE,EAAAC,EAAAC,GACPzB,GAIAlL,QAAAC,KAAAyM,EAAA,8BAAAC,EAAA,aASO,SAAAC,EAAApP,GACP,IAAAqP,EAAArP,EAAAqP,UAEAC,EAAA,CACAC,QAAA,KACA3T,QAAA,MAGA,wBAAAoE,MAAAqP,UAEA,OADAC,EAAAC,QAAA,iBACAD,EAGA,GAAAD,EAAAG,gBAEAF,EAAAC,QAAA,UACAD,EAAA1T,QAAA+R,EAAA0B,EAAAI,UAAA,2BACG,GAAAJ,EAAAK,qBAAA,IAAA1P,EAAA2P,iBAAA3P,EAAA4P,0BAAA5P,EAAA8C,eAKHwM,EAAAC,QAAA,SACAD,EAAA1T,QAAA+R,EAAA0B,EAAAI,UAAA,gCACG,GAAAJ,EAAAQ,cAAAR,EAAAI,UAAA1B,MAAA,sBAEHuB,EAAAC,QAAA,OACAD,EAAA1T,QAAA+R,EAAA0B,EAAAI,UAAA,4BACG,KAAAzP,EAAAc,oBAAAuO,EAAAI,UAAA1B,MAAA,wBAOH,OADAuB,EAAAC,QAAA,2BACAD,EALAA,EAAAC,QAAA,SACAD,EAAA1T,QAAA+R,EAAA0B,EAAAI,UAAA,0BAOA,OAAAH,EAQO,SAAAQ,EAAAC,GACP,wBAAAA,EACAA,EAGA3Z,OAAAC,KAAA0Z,GAAAC,OAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,kBAAAJ,EAAAG,GACA9Y,EAAA+Y,EAAAL,EAAAC,EAAAG,IAAAH,EAAAG,GACAE,EAAAD,IAAA/Z,OAAAC,KAAAe,GAAApD,OAEA,YAAAsB,IAAA8B,GAAAgZ,EACAH,EAGA7Z,OAAA8Q,OAAA+I,EAAsC7Z,OAAAkN,EAAA,EAAAlN,CAAe,GAAG8Z,EAAA9Y,KACrD,IAsBI,SAAAiZ,EAAAf,EAAAlU,EAAAkV,GACP,IAAAC,EAAAD,EAAA,6BACAE,EAAA,IAAAjE,IAEA,UAAAnR,EACA,OAAAoV,EAGA,IAAAC,EAAA,GAaA,OAZAnB,EAAA/Y,QAAA,SAAAa,GACA,UAAAA,EAAAtD,MAAAsD,EAAAsZ,kBAAAtV,EAAA3F,IACAgb,EAAAjc,KAAA4C,KAGAqZ,EAAAla,QAAA,SAAAoa,GACArB,EAAA/Y,QAAA,SAAAiW,GACAA,EAAA1Y,OAAAyc,GAAA/D,EAAAhP,UAAAmT,EAAAlb,IAlCO,SAAAmb,EAAApE,EAAAqE,EAAAC,GACPD,IAAAC,EAAAC,IAAAF,EAAApb,MAIAqb,EAAApE,IAAAmE,EAAApb,GAAAob,GACAza,OAAAC,KAAAwa,GAAAta,QAAA,SAAAxB,GACAA,EAAAic,SAAA,MACAJ,EAAApE,IAAA/I,IAAAoN,EAAA9b,IAAA+b,GACK/b,EAAAic,SAAA,QACLH,EAAA9b,GAAAwB,QAAA,SAAAd,GACAmb,EAAApE,IAAA/I,IAAAhO,GAAAqb,QAwBAF,CAAAtB,EAAA9C,EAAAgE,OAIAA,ECpOA,IAAIS,EAAUjC,EACP,SAAAkC,EAAAlR,GACP,IAAAqP,EAAArP,KAAAqP,UAEA,GAAAA,EAAAQ,aAAA,CAIA,IAAAsB,EAAuB/B,EAAmBpP,GAE1CoR,EAAA,SAAAhI,GACA,qBAAAA,KAAAyB,WAAAzB,EAAA0B,SACA,OAAA1B,EAGA,IAAAiI,EAAA,GAuDA,OAtDAjb,OAAAC,KAAA+S,GAAA7S,QAAA,SAAA2Z,GACA,eAAAA,GAAA,aAAAA,GAAA,gBAAAA,EAAA,CAIA,IAAAoB,EAAA,kBAAAlI,EAAA8G,GAAA9G,EAAA8G,GAAA,CACAqB,MAAAnI,EAAA8G,SAGA5a,IAAAgc,EAAAE,OAAA,kBAAAF,EAAAE,QACAF,EAAAhT,IAAAgT,EAAAG,IAAAH,EAAAE,OAGA,IAAAE,EAAA,SAAA5e,EAAAiC,GACA,OAAAjC,EACAA,EAAAiC,EAAAoI,OAAA,GAAA1I,cAAAM,EAAA4H,MAAA,GAGA,aAAA5H,EAAA,WAAAA,GAGA,QAAAO,IAAAgc,EAAAC,MAAA,CACAF,EAAAvG,SAAAuG,EAAAvG,UAAA,GACA,IAAA6G,EAAA,GAEA,kBAAAL,EAAAC,OACAI,EAAAD,EAAA,MAAAxB,IAAAoB,EAAAC,MACAF,EAAAvG,SAAAtW,KAAAmd,IACAA,EAAA,IACAD,EAAA,MAAAxB,IAAAoB,EAAAC,MACAF,EAAAvG,SAAAtW,KAAAmd,KAEAA,EAAAD,EAAA,GAAAxB,IAAAoB,EAAAC,MACAF,EAAAvG,SAAAtW,KAAAmd,SAIArc,IAAAgc,EAAAE,OAAA,kBAAAF,EAAAE,OACAH,EAAAxG,UAAAwG,EAAAxG,WAAA,GACAwG,EAAAxG,UAAA6G,EAAA,GAAAxB,IAAAoB,EAAAE,OAEA,cAAAjb,QAAA,SAAAqb,QACAtc,IAAAgc,EAAAM,KACAP,EAAAxG,UAAAwG,EAAAxG,WAAA,GACAwG,EAAAxG,UAAA6G,EAAAE,EAAA1B,IAAAoB,EAAAM,SAMAxI,EAAAyI,WACAR,EAAAvG,UAAAuG,EAAAvG,UAAA,IAAAzS,OAAA+Q,EAAAyI,WAGAR,GAGAS,EAAA,SAAAC,EAAAC,GACA,GAAAb,EAAAvV,SAAA,GACA,OAAAoW,EAAAD,GAKA,IAFAA,EAAA9X,KAAAC,MAAAD,KAAAE,UAAA4X,MAEA,kBAAAA,EAAAE,MAAA,CACA,IAAAC,EAAA,SAAAvX,EAAAwX,EAAAC,GACAD,KAAAxX,KAAAyX,KAAAzX,KACAA,EAAAyX,GAAAzX,EAAAwX,UACAxX,EAAAwX,KAKAD,GADAH,EAAA9X,KAAAC,MAAAD,KAAAE,UAAA4X,KACAE,MAAA,yCACAC,EAAAH,EAAAE,MAAA,2CACAF,EAAAE,MAAAb,EAAAW,EAAAE,OAGA,GAAAF,GAAA,kBAAAA,EAAAM,MAAA,CAEA,IAAAC,EAAAP,EAAAM,MAAAE,WACAD,MAAA,kBAAAA,IAAA,CACAf,MAAAe,IAEA,IAIAE,EAJAC,EAAAtB,EAAAvV,QAAA,GAEA,GAAA0W,IAAA,SAAAA,EAAAd,OAAA,gBAAAc,EAAAd,OAAA,SAAAc,EAAAf,OAAA,gBAAAe,EAAAf,UAAAlC,EAAAQ,aAAA6C,0BAAArD,EAAAQ,aAAA6C,0BAAAH,YAAAE,GAUA,UATAV,EAAAM,MAAAE,WAGA,gBAAAD,EAAAd,OAAA,gBAAAc,EAAAf,MACAiB,EAAA,gBACS,SAAAF,EAAAd,OAAA,SAAAc,EAAAf,QACTiB,EAAA,WAGAA,EAEA,OAAAnD,EAAAQ,aAAA8C,mBAAAvG,KAAA,SAAAwG,GAIA,IAAAC,GAHAD,IAAA7f,OAAA,SAAA+f,GACA,qBAAAA,EAAA5Z,QAEAkG,KAAA,SAAA0T,GACA,OAAAN,EAAAO,KAAA,SAAAhF,GACA,OAAA+E,EAAAE,MAAAvf,cAAAwf,SAAAlF,OAkBA,OAdA8E,GAAAD,EAAA5e,QAAAwe,EAAAS,SAAA,UACAJ,EAAAD,IAAA5e,OAAA,IAGA6e,IACAd,EAAAM,MAAAa,SAAAZ,EAAAd,MAAA,CACAA,MAAAqB,EAAAK,UACe,CACf3B,MAAAsB,EAAAK,WAIAnB,EAAAM,MAAAjB,EAAAW,EAAAM,OACYpB,EAAO,WAAAhX,KAAAE,UAAA4X,IACnBC,EAAAD,KAKAA,EAAAM,MAAAjB,EAAAW,EAAAM,OAIA,OADIpB,EAAO,WAAAhX,KAAAE,UAAA4X,IACXC,EAAAD,IAGAoB,EAAA,SAAA3T,GACA,OAAA2R,EAAAvV,SAAA,GACA4D,EAGA,CACAzK,KAAA,CACAqe,sBAAA,kBACAC,yBAAA,kBACAzT,kBAAA,kBACA0T,qBAAA,gBACAC,4BAAA,uBACAC,gBAAA,mBACAC,+BAAA,kBACAC,wBAAA,kBACAC,gBAAA,aACAC,mBAAA,aACAC,mBAAA,cACOrU,EAAAzK,OAAAyK,EAAAzK,KACP+e,QAAAtU,EAAAsU,QACAC,WAAAvU,EAAAuU,YAAAvU,EAAAwU,eACAniB,SAAA,WACA,OAAAmP,KAAAjM,MAAAiM,KAAA8S,SAAA,MAAA9S,KAAA8S,WAmBA,GAJAzE,EAAA4E,aAVA,SAAAlC,EAAAmC,EAAAC,GACArC,EAAAC,EAAA,SAAA3I,GACAiG,EAAAK,mBAAAtG,EAAA8K,EAAA,SAAA1U,GACA2U,GACAA,EAAAhB,EAAA3T,SAMA6B,KAAAgO,GAIAA,EAAAQ,aAAAoE,aAAA,CACA,IAAAG,EAAA/E,EAAAQ,aAAAoE,aAAA5S,KAAAgO,EAAAQ,cAEAR,EAAAQ,aAAAoE,aAAA,SAAAI,GACA,OAAAvC,EAAAuC,EAAA,SAAAjL,GACA,OAAAgL,EAAAhL,GAAAgD,KAAA,SAAAjR,GACA,GAAAiO,EAAA6I,QAAA9W,EAAAuQ,iBAAA1X,QAAAoV,EAAAiJ,QAAAlX,EAAAwQ,iBAAA3X,OAIA,MAHAmH,EAAAkK,YAAA9O,QAAA,SAAA6E,GACAA,EAAA2K,SAEA,IAAAuO,aAAA,oBAGA,OAAAnZ,GACS,SAAAqE,GACT,OAAA4I,QAAAC,OAAA8K,EAAA3T,WC/MO,SAAA+U,EAAAvU,EAAAwU,GACPxU,EAAAqP,UAAAQ,cAAA,oBAAA7P,EAAAqP,UAAAQ,cAIA7P,EAAAqP,UAAAQ,eAMA,oBAAA2E,EAKAxU,EAAAqP,UAAAQ,aAAA4E,gBAAA,SAAA1C,GACA,OAAAyC,EAAAzC,GAAA3F,KAAA,SAAAsI,GACA,IAAAC,EAAA5C,EAAAM,OAAAN,EAAAM,MAAAuC,MACAC,EAAA9C,EAAAM,OAAAN,EAAAM,MAAAyC,OACAC,EAAAhD,EAAAM,OAAAN,EAAAM,MAAA2C,UAiBA,OAhBAjD,EAAAM,MAAA,CACAxH,UAAA,CACAoK,kBAAA,UACAC,oBAAAR,EACAS,aAAAJ,GAAA,IAIAJ,IACA5C,EAAAM,MAAAxH,UAAAuK,SAAAT,GAGAE,IACA9C,EAAAM,MAAAxH,UAAAwK,UAAAR,GAGA7U,EAAAqP,UAAAQ,aAAAoE,aAAAlC,MAzBAvP,QAAAgL,MAAA,gECTO,SAAA8H,EAAAtV,GACPA,EAAAqJ,YAAArJ,EAAAqJ,aAAArJ,EAAAuV,kBAEO,SAAAC,EAAAxV,GACP,qBAAAA,MAAAc,mBAAA,YAAAd,EAAAc,kBAAAyC,UAiFIyK,EAA6BhO,EAAA,iBAAAR,GASjC,OARAA,EAAA1D,aACA1F,OAAAkN,eAAA9D,EAAA,eACApI,MAAA,CACAoJ,SAAAhB,EAAAgB,YAKAhB,QA1FA,CACApJ,OAAAkN,eAAAtD,EAAAc,kBAAAyC,UAAA,WACAE,IAAA,WACA,OAAAzC,KAAAyU,UAEA/I,IAAA,SAAAgJ,GACA1U,KAAAyU,UACAzU,KAAA6F,oBAAA,QAAA7F,KAAAyU,UAGAzU,KAAA0E,iBAAA,QAAA1E,KAAAyU,SAAAC,IAEA9G,YAAA,EACApL,cAAA,IAEA,IAAAmS,EAAA3V,EAAAc,kBAAAyC,UAAAzE,qBAEAkB,EAAAc,kBAAAyC,UAAAzE,qBAAA,WACA,IAAA8W,EAAA5U,KAyDA,OAvDAA,KAAA6U,eACA7U,KAAA6U,aAAA,SAAArW,GAGAA,EAAArE,OAAAuK,iBAAA,oBAAAoQ,GACA,IAAAtV,EAGAA,EADAR,EAAAc,kBAAAyC,UAAA4C,aACAyP,EAAAzP,eAAA/G,KAAA,SAAAkS,GACA,OAAAA,EAAAlW,OAAAkW,EAAAlW,MAAA3F,KAAAqgB,EAAA1a,MAAA3F,KAGA,CACA2F,MAAA0a,EAAA1a,OAIA,IAAAgJ,EAAA,IAAAzD,MAAA,SACAyD,EAAAhJ,MAAA0a,EAAA1a,MACAgJ,EAAA5D,WACA4D,EAAAtI,YAAA,CACA0E,YAEA4D,EAAA3D,QAAA,CAAAjB,EAAArE,QAEAya,EAAAxV,cAAAgE,KAEA5E,EAAArE,OAAAkK,YAAA9O,QAAA,SAAA6E,GACA,IAAAoF,EAGAA,EADAR,EAAAc,kBAAAyC,UAAA4C,aACAyP,EAAAzP,eAAA/G,KAAA,SAAAkS,GACA,OAAAA,EAAAlW,OAAAkW,EAAAlW,MAAA3F,KAAA2F,EAAA3F,KAGA,CACA2F,SAIA,IAAAgJ,EAAA,IAAAzD,MAAA,SACAyD,EAAAhJ,QACAgJ,EAAA5D,WACA4D,EAAAtI,YAAA,CACA0E,YAEA4D,EAAA3D,QAAA,CAAAjB,EAAArE,QAEAya,EAAAxV,cAAAgE,MAIApD,KAAA0E,iBAAA,YAAA1E,KAAA6U,eAGAF,EAAA9I,MAAA7L,KAAA4J,aAmBO,SAAAmL,EAAA/V,GAEP,qBAAAA,KAAAc,qBAAA,eAAAd,EAAAc,kBAAAyC,YAAA,qBAAAvD,EAAAc,kBAAAyC,UAAA,CACA,IAAAyS,EAAA,SAAAzV,EAAAnF,GACA,OACAA,QAEA6a,WASA,YARA3gB,IAAA0L,KAAAkV,QACA,UAAA9a,EAAAlC,KACA8H,KAAAkV,MAAA3V,EAAA4V,iBAAA/a,GAEA4F,KAAAkV,MAAA,MAIAlV,KAAAkV,OAGAE,IAAA7V,IAKA,IAAAP,EAAAc,kBAAAyC,UAAA2C,WAAA,CACAlG,EAAAc,kBAAAyC,UAAA2C,WAAA,WAEA,OADAlF,KAAAqV,SAAArV,KAAAqV,UAAA,GACArV,KAAAqV,SAAA1Z,SAGA,IAAA2Z,EAAAtW,EAAAc,kBAAAyC,UAAApD,SAEAH,EAAAc,kBAAAyC,UAAApD,SAAA,SAAA/E,EAAAD,GACA,IAAA0K,EAAAyQ,EAAAzJ,MAAA7L,KAAA4J,WAQA,OANA/E,IACAA,EAAAmQ,EAAAhV,KAAA5F,GAEA4F,KAAAqV,SAAA7hB,KAAAqR,IAGAA,GAGA,IAAA0Q,EAAAvW,EAAAc,kBAAAyC,UAAAqC,YAEA5F,EAAAc,kBAAAyC,UAAAqC,YAAA,SAAAC,GACA0Q,EAAA1J,MAAA7L,KAAA4J,WAEA,IAAApF,EAAAxE,KAAAqV,SAAArjB,QAAA6S,IAEA,IAAAL,GACAxE,KAAAqV,SAAArQ,OAAAR,EAAA,IAKA,IAAAgR,EAAAxW,EAAAc,kBAAAyC,UAAA6B,UAEApF,EAAAc,kBAAAyC,UAAA6B,UAAA,SAAAjK,GACA,IAAAsb,EAAAzV,KAEAA,KAAAqV,SAAArV,KAAAqV,UAAA,GACAG,EAAA3J,MAAA7L,KAAA,CAAA7F,IACAA,EAAAkK,YAAA9O,QAAA,SAAA6E,GACAqb,EAAAJ,SAAA7hB,KAAAwhB,EAAAS,EAAArb,OAIA,IAAAsb,EAAA1W,EAAAc,kBAAAyC,UAAA0C,aAEAjG,EAAAc,kBAAAyC,UAAA0C,aAAA,SAAA9K,GACA,IAAAwb,EAAA3V,KAEAA,KAAAqV,SAAArV,KAAAqV,UAAA,GACAK,EAAA7J,MAAA7L,KAAA,CAAA7F,IACAA,EAAAkK,YAAA9O,QAAA,SAAA6E,GACA,IAAAyK,EAAA8Q,EAAAN,SAAAjX,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAGAyK,GAEA8Q,EAAAN,SAAArQ,OAAA2Q,EAAAN,SAAArjB,QAAA6S,GAAA,WAIG,qBAAA7F,KAAAc,mBAAA,eAAAd,EAAAc,kBAAAyC,WAAA,qBAAAvD,EAAAc,kBAAAyC,WAAAvD,EAAAmF,gBAAA,SAAAnF,EAAAmF,aAAA5B,WAAA,CACH,IAAAqT,EAAA5W,EAAAc,kBAAAyC,UAAA2C,WAEAlG,EAAAc,kBAAAyC,UAAA2C,WAAA,WACA,IAAA2Q,EAAA7V,KAEA8V,EAAAF,EAAA/J,MAAA7L,KAAA,IAIA,OAHA8V,EAAAvgB,QAAA,SAAAsP,GACA,OAAAA,EAAAuQ,IAAAS,IAEAC,GAGA1gB,OAAAkN,eAAAtD,EAAAmF,aAAA5B,UAAA,QACAE,IAAA,WASA,YARAnO,IAAA0L,KAAAkV,QACA,UAAAlV,KAAA5F,MAAAlC,KACA8H,KAAAkV,MAAAlV,KAAAoV,IAAAD,iBAAAnV,KAAA5F,OAEA4F,KAAAkV,MAAA,MAIAlV,KAAAkV,UAKO,SAAAa,EAAA/W,GACP,GAAAA,EAAAc,kBAAA,CAIA,IAAAkW,EAAAhX,EAAAc,kBAAAyC,UAAAuI,SAEA9L,EAAAc,kBAAAyC,UAAAuI,SAAA,SAAAC,EAAAkL,EAAAC,GACA,IAAAC,EAAAnW,KAEAuM,EAAA3C,UAGA,GAAAA,UAAA5W,OAAA,uBAAA+X,EACA,OAAAiL,EAAAnK,MAAA7L,KAAA4J,WAKA,OAAAoM,EAAAhjB,SAAA,IAAA4W,UAAA5W,QAAA,oBAAA4W,UAAA,IACA,OAAAoM,EAAAnK,MAAA7L,KAAA,IAGA,IAAAoW,EAAA,SAAAC,GACA,IAAAC,EAAA,GAgBA,OAfAD,EAAA/H,SACA/Y,QAAA,SAAAghB,GACA,IAAAC,EAAA,CACA/hB,GAAA8hB,EAAA9hB,GACAgiB,UAAAF,EAAAE,UACA3jB,KAAA,CACAqZ,eAAA,kBACAC,gBAAA,oBACWmK,EAAAzjB,OAAAyjB,EAAAzjB,MAEXyjB,EAAAG,QAAAnhB,QAAA,SAAAxB,GACAyiB,EAAAziB,GAAAwiB,EAAA9K,KAAA1X,KAEAuiB,EAAAE,EAAA/hB,IAAA+hB,IAEAF,GAIAK,EAAA,SAAAnL,GACA,WAAAD,IAAAnW,OAAAC,KAAAmW,GAAApa,IAAA,SAAA8d,GACA,OAAAA,EAAA1D,EAAA0D,QAIA,GAAAtF,UAAA5W,QAAA,GAKA,OAAAgjB,EAAAnK,MAAA7L,KAAA,CAJA,SAAAqW,GACA9J,EAAA,GAAAoK,EAAAP,EAAAC,MAGAzM,UAAA,KAIA,WAAAxC,QAAA,SAAAQ,EAAAP,GACA2O,EAAAnK,MAAAsK,EAAA,UAAAE,GACAzO,EAAA+O,EAAAP,EAAAC,MACOhP,MACF+D,KAAA6K,EAAAC,KAGE,SAAAU,EAAA5X,GACP,qBAAAA,KAAAc,mBAAAd,EAAAmF,cAAAnF,EAAAuJ,eAAA,CAKA,kBAAAvJ,EAAAmF,aAAA5B,WAAA,CACA,IAAAqT,EAAA5W,EAAAc,kBAAAyC,UAAA2C,WAEA0Q,IACA5W,EAAAc,kBAAAyC,UAAA2C,WAAA,WACA,IAAA2R,EAAA7W,KAEA8V,EAAAF,EAAA/J,MAAA7L,KAAA,IAIA,OAHA8V,EAAAvgB,QAAA,SAAAsP,GACA,OAAAA,EAAAuQ,IAAAyB,IAEAf,IAIA,IAAAR,EAAAtW,EAAAc,kBAAAyC,UAAApD,SAEAmW,IACAtW,EAAAc,kBAAAyC,UAAApD,SAAA,WACA,IAAA0F,EAAAyQ,EAAAzJ,MAAA7L,KAAA4J,WAEA,OADA/E,EAAAuQ,IAAApV,KACA6E,IAIA7F,EAAAmF,aAAA5B,UAAAuI,SAAA,WACA,IAAAjG,EAAA7E,KACA,OAAAA,KAAAoV,IAAAtK,WAAAM,KAAA,SAAAkD,GACA,OAKUe,EAAiBf,EAAAzJ,EAAAzK,OAAA,MAO3B,kBAAA4E,EAAAuJ,eAAAhG,WAAA,CACA,IAAAuU,EAAA9X,EAAAc,kBAAAyC,UAAA4C,aAEA2R,IACA9X,EAAAc,kBAAAyC,UAAA4C,aAAA,WACA,IAAA4R,EAAA/W,KAEAgX,EAAAF,EAAAjL,MAAA7L,KAAA,IAIA,OAHAgX,EAAAzhB,QAAA,SAAAiK,GACA,OAAAA,EAAA4V,IAAA2B,IAEAC,IAIIhK,EAA6BhO,EAAA,iBAAAR,GAEjC,OADAA,EAAAgB,SAAA4V,IAAA5W,EAAAyY,WACAzY,IAGAQ,EAAAuJ,eAAAhG,UAAAuI,SAAA,WACA,IAAAtL,EAAAQ,KACA,OAAAA,KAAAoV,IAAAtK,WAAAM,KAAA,SAAAkD,GACA,OAAee,EAAiBf,EAAA9O,EAAApF,OAAA,MAKhC,gBAAA4E,EAAAmF,aAAA5B,WAAA,aAAAvD,EAAAuJ,eAAAhG,UAAA,CAKA,IAAAyT,EAAAhX,EAAAc,kBAAAyC,UAAAuI,SAEA9L,EAAAc,kBAAAyC,UAAAuI,SAAA,WACA,GAAAlB,UAAA5W,OAAA,GAAA4W,UAAA,aAAA5K,EAAAgM,iBAAA,CACA,IACAnG,EACArF,EACA0X,EAHA9c,EAAAwP,UAAA,GAyBA,OArBA5J,KAAAkF,aAAA3P,QAAA,SAAA0O,GACAA,EAAA7J,YACAyK,EACAqS,GAAA,EAEArS,EAAAZ,KAIAjE,KAAAmF,eAAA5P,QAAA,SAAA+a,GASA,OARAA,EAAAlW,YACAoF,EACA0X,GAAA,EAEA1X,EAAA8Q,GAIAA,EAAAlW,YAGA8c,GAAArS,GAAArF,EACA4H,QAAAC,OAAA,IAAAiM,aAAA,mFACOzO,EACPA,EAAAiG,WACOtL,EACPA,EAAAsL,WAGA1D,QAAAC,OAAA,IAAAiM,aAAA,uEAGA,OAAA0C,EAAAnK,MAAA7L,KAAA4J,cAGO,SAAAuN,EAAAnY,GAIPA,EAAAc,kBAAAyC,UAAAgB,gBAAA,WACA,IAAA6T,EAAApX,KAGA,OADAA,KAAAqX,qBAAArX,KAAAqX,sBAAA,GACAjiB,OAAAC,KAAA2K,KAAAqX,sBAAAjmB,IAAA,SAAAkmB,GACA,OAAAF,EAAAC,qBAAAC,GAAA,MAIA,IAAAhC,EAAAtW,EAAAc,kBAAAyC,UAAApD,SAEAH,EAAAc,kBAAAyC,UAAApD,SAAA,SAAA/E,EAAAD,GACA,IAAAA,EACA,OAAAmb,EAAAzJ,MAAA7L,KAAA4J,WAGA5J,KAAAqX,qBAAArX,KAAAqX,sBAAA,GACA,IAAAxS,EAAAyQ,EAAAzJ,MAAA7L,KAAA4J,WAQA,OANA5J,KAAAqX,qBAAAld,EAAA1F,KAEK,IAAAuL,KAAAqX,qBAAAld,EAAA1F,IAAAzC,QAAA6S,IACL7E,KAAAqX,qBAAAld,EAAA1F,IAAAjB,KAAAqR,GAFA7E,KAAAqX,qBAAAld,EAAA1F,IAAA,CAAA0F,EAAA0K,GAKAA,GAGA,IAAA2Q,EAAAxW,EAAAc,kBAAAyC,UAAA6B,UAEApF,EAAAc,kBAAAyC,UAAA6B,UAAA,SAAAjK,GACA,IAAAod,EAAAvX,KAEAA,KAAAqX,qBAAArX,KAAAqX,sBAAA,GACAld,EAAAkK,YAAA9O,QAAA,SAAA6E,GAKA,GAJAmd,EAAArS,aAAA9G,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAIA,UAAAkZ,aAAA,gDAGA,IAAAkE,EAAAxX,KAAAkF,aACAsQ,EAAA3J,MAAA7L,KAAA4J,WACA,IAAA6N,EAAAzX,KAAAkF,aAAAnT,OAAA,SAAA2lB,GACA,WAAAF,EAAAxlB,QAAA0lB,KAEA1X,KAAAqX,qBAAAld,EAAA1F,IAAA,CAAA0F,GAAA9C,OAAAogB,IAGA,IAAA/B,EAAA1W,EAAAc,kBAAAyC,UAAA0C,aAEAjG,EAAAc,kBAAAyC,UAAA0C,aAAA,SAAA9K,GAGA,OAFA6F,KAAAqX,qBAAArX,KAAAqX,sBAAA,UACArX,KAAAqX,qBAAAld,EAAA1F,IACAihB,EAAA7J,MAAA7L,KAAA4J,YAGA,IAAA2L,EAAAvW,EAAAc,kBAAAyC,UAAAqC,YAEA5F,EAAAc,kBAAAyC,UAAAqC,YAAA,SAAAC,GACA,IAAA8S,EAAA3X,KAkBA,OAhBAA,KAAAqX,qBAAArX,KAAAqX,sBAAA,GAEAxS,GACAzP,OAAAC,KAAA2K,KAAAqX,sBAAA9hB,QAAA,SAAA+hB,GACA,IAAA9S,EAAAmT,EAAAN,qBAAAC,GAAAtlB,QAAA6S,IAEA,IAAAL,GACAmT,EAAAN,qBAAAC,GAAAtS,OAAAR,EAAA,GAGA,IAAAmT,EAAAN,qBAAAC,GAAAtkB,eACA2kB,EAAAN,qBAAAC,KAKA/B,EAAA1J,MAAA7L,KAAA4J,YAGO,SAAAgO,EAAA5Y,GACP,GAAAA,EAAAc,kBAAA,CAIA,IAAAqQ,EAAuB/B,EAAmBpP,GAE1C,GAAAA,EAAAc,kBAAAyC,UAAApD,UAAAgR,EAAAvV,SAAA,GACA,OAAAuc,EAAAnY,GAKA,IAAA6Y,EAAA7Y,EAAAc,kBAAAyC,UAAAgB,gBAEAvE,EAAAc,kBAAAyC,UAAAgB,gBAAA,WACA,IAAAuU,EAAA9X,KAEA+X,EAAAF,EAAAhM,MAAA7L,MAEA,OADAA,KAAAgY,gBAAAhY,KAAAgY,iBAAA,GACAD,EAAA3mB,IAAA,SAAA+I,GACA,OAAA2d,EAAAE,gBAAA7d,EAAA1F,OAIA,IAAA+gB,EAAAxW,EAAAc,kBAAAyC,UAAA6B,UAEApF,EAAAc,kBAAAyC,UAAA6B,UAAA,SAAAjK,GACA,IAAA8d,EAAAjY,KAeA,GAbAA,KAAAkY,SAAAlY,KAAAkY,UAAA,GACAlY,KAAAgY,gBAAAhY,KAAAgY,iBAAA,GACA7d,EAAAkK,YAAA9O,QAAA,SAAA6E,GAKA,GAJA6d,EAAA/S,aAAA9G,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAIA,UAAAkZ,aAAA,iDAKAtT,KAAAgY,gBAAA7d,EAAA1F,IAAA,CACA,IAAA0jB,EAAA,IAAAnZ,EAAAqJ,YAAAlO,EAAAkK,aACArE,KAAAkY,SAAA/d,EAAA1F,IAAA0jB,EACAnY,KAAAgY,gBAAAG,EAAA1jB,IAAA0F,EACAA,EAAAge,EAGA3C,EAAA3J,MAAA7L,KAAA,CAAA7F,KAGA,IAAAub,EAAA1W,EAAAc,kBAAAyC,UAAA0C,aAEAjG,EAAAc,kBAAAyC,UAAA0C,aAAA,SAAA9K,GACA6F,KAAAkY,SAAAlY,KAAAkY,UAAA,GACAlY,KAAAgY,gBAAAhY,KAAAgY,iBAAA,GACAtC,EAAA7J,MAAA7L,KAAA,CAAAA,KAAAkY,SAAA/d,EAAA1F,KAAA0F,WACA6F,KAAAgY,gBAAAhY,KAAAkY,SAAA/d,EAAA1F,IAAAuL,KAAAkY,SAAA/d,EAAA1F,OAAA0F,EAAA1F,WACAuL,KAAAkY,SAAA/d,EAAA1F,KAGAuK,EAAAc,kBAAAyC,UAAApD,SAAA,SAAA/E,EAAAD,GACA,IAAAie,EAAApY,KAEA,cAAAA,KAAArC,eACA,UAAA2V,aAAA,2EAGA,IAAA7T,EAAA,GAAA9D,MAAA0c,KAAAzO,UAAA,GAEA,OAAAnK,EAAAzM,SAAAyM,EAAA,GAAA4E,YAAAjG,KAAA,SAAA0G,GACA,OAAAA,IAAA1K,IAIA,UAAAkZ,aAAA,qIAOA,GAJAtT,KAAAkF,aAAA9G,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,YAIA,UAAAkZ,aAAA,8CAGAtT,KAAAkY,SAAAlY,KAAAkY,UAAA,GACAlY,KAAAgY,gBAAAhY,KAAAgY,iBAAA,GACA,IAAAM,EAAAtY,KAAAkY,SAAA/d,EAAA1F,IAEA,GAAA6jB,EAKAA,EAAAnZ,SAAA/E,GAEAgN,QAAAQ,UAAAwD,KAAA,WACAgN,EAAAhZ,cAAA,IAAAO,MAAA,4BAEK,CACL,IAAAwY,EAAA,IAAAnZ,EAAAqJ,YAAA,CAAAjO,IACA4F,KAAAkY,SAAA/d,EAAA1F,IAAA0jB,EACAnY,KAAAgY,gBAAAG,EAAA1jB,IAAA0F,EACA6F,KAAAoE,UAAA+T,GAGA,OAAAnY,KAAAkF,aAAA9G,KAAA,SAAA6F,GACA,OAAAA,EAAA7J,aAgCA,+BAAA7E,QAAA,SAAA6K,GACA,IAAAkM,EAAAtN,EAAAc,kBAAAyC,UAAAnC,GAEApB,EAAAc,kBAAAyC,UAAAnC,GAAA,WACA,IAAAmY,EAAAvY,KAEAuM,EAAA3C,UAGA,OAFAA,UAAA5W,QAAA,oBAAA4W,UAAA,GAGA0C,EAAAT,MAAA7L,KAAA,UAAAvI,GACA,IAAA4S,EAAAmO,EAAAD,EAAA9gB,GACA8U,EAAA,GAAAV,MAAA,MAAAxB,KACS,SAAA6M,GACT3K,EAAA,IACAA,EAAA,GAAAV,MAAA,KAAAqL,IAEStN,UAAA,KAGT0C,EAAAT,MAAA7L,KAAA4J,WAAAwB,KAAA,SAAA3T,GACA,OAAA+gB,EAAAD,EAAA9gB,QAIA,IAAAghB,EAAAzZ,EAAAc,kBAAAyC,UAAA1E,oBAEAmB,EAAAc,kBAAAyC,UAAA1E,oBAAA,WACA,OAAA+L,UAAA5W,QAAA4W,UAAA,GAAA9W,MAIA8W,UAAA,GA7CA,SAAArK,EAAA9H,GACA,IAAAlE,EAAAkE,EAAAlE,IAMA,OALA6B,OAAAC,KAAAkK,EAAAyY,iBAAA,IAAAziB,QAAA,SAAAmjB,GACA,IAAAC,EAAApZ,EAAAyY,gBAAAU,GACAE,EAAArZ,EAAA2Y,SAAAS,EAAAlkB,IACAlB,IAAAslB,QAAA,IAAAC,OAAAH,EAAAlkB,GAAA,KAAAmkB,EAAAnkB,MAEA,IAAA6V,sBAAA,CACAxX,KAAA2E,EAAA3E,KACAS,QAoCAwlB,CAAA/Y,KAAA4J,UAAA,IACA6O,EAAA5M,MAAA7L,KAAA4J,YAJA6O,EAAA5M,MAAA7L,KAAA4J,YAQA,IAAAoP,EAAA5jB,OAAA6jB,yBAAAja,EAAAc,kBAAAyC,UAAA,oBACAnN,OAAAkN,eAAAtD,EAAAc,kBAAAyC,UAAA,oBACAE,IAAA,WACA,IAAAhL,EAAAuhB,EAAAvW,IAAAoJ,MAAA7L,MAEA,WAAAvI,EAAA3E,KACA2E,EAGA+gB,EAAAxY,KAAAvI,MAIAuH,EAAAc,kBAAAyC,UAAAqC,YAAA,SAAAC,GACA,IAoBA1K,EApBA+e,EAAAlZ,KAEA,cAAAA,KAAArC,eACA,UAAA2V,aAAA,2EAKA,IAAAzO,EAAAuQ,IACA,UAAA9B,aAAA,sGAKA,KAFAzO,EAAAuQ,MAAApV,MAGA,UAAAsT,aAAA,mEAIAtT,KAAAkY,SAAAlY,KAAAkY,UAAA,GAEA9iB,OAAAC,KAAA2K,KAAAkY,UAAA3iB,QAAA,SAAA4jB,GACAD,EAAAhB,SAAAiB,GAAA9U,YAAAjG,KAAA,SAAAhE,GACA,OAAAyK,EAAAzK,cAIAD,EAAA+e,EAAAhB,SAAAiB,MAIAhf,IACA,IAAAA,EAAAkK,YAAArR,OAGAgN,KAAAiF,aAAAjF,KAAAgY,gBAAA7d,EAAA1F,KAGA0F,EAAAyK,YAAAC,EAAAzK,OAGA4F,KAAAZ,cAAA,IAAAO,MAAA,wBAtHA,SAAA6Y,EAAAjZ,EAAA9H,GACA,IAAAlE,EAAAkE,EAAAlE,IAMA,OALA6B,OAAAC,KAAAkK,EAAAyY,iBAAA,IAAAziB,QAAA,SAAAmjB,GACA,IAAAC,EAAApZ,EAAAyY,gBAAAU,GACAE,EAAArZ,EAAA2Y,SAAAS,EAAAlkB,IACAlB,IAAAslB,QAAA,IAAAC,OAAAF,EAAAnkB,GAAA,KAAAkkB,EAAAlkB,MAEA,IAAA6V,sBAAA,CACAxX,KAAA2E,EAAA3E,KACAS,SAiHO,SAAA6lB,EAAApa,GAMP,IALAA,EAAAc,mBAAAd,EAAA4P,0BAEA5P,EAAAc,kBAAAd,EAAA4P,yBAGA5P,EAAAc,kBAAA,CAKA,iEAAAvK,QAAA,SAAA6K,GACA,IAAAkM,EAAAtN,EAAAc,kBAAAyC,UAAAnC,GAEApB,EAAAc,kBAAAyC,UAAAnC,GAAA,WAEA,OADAwJ,UAAA,2BAAAxJ,EAAApB,EAAAqa,gBAAAra,EAAAsL,uBAAAV,UAAA,IACA0C,EAAAT,MAAA7L,KAAA4J,cAIA,IAAA0P,EAAAta,EAAAc,kBAAAyC,UAAAqI,gBAEA5L,EAAAc,kBAAAyC,UAAAqI,gBAAA,WACA,OAAAhB,UAAA,GAQA0P,EAAAzN,MAAA7L,KAAA4J,YAPAA,UAAA,IACAA,UAAA,GAAAiC,MAAA,MAGAzE,QAAAQ,aAMO,SAAA2R,EAAAva,GACLgO,EAA6BhO,EAAA,6BAAAR,GAG/B,cAFAA,EAAAgb,OAEA7b,eAIA,OAAAa,0BCnwBO,SAASib,EAAgBza,GAChC,IAAAqP,EAAArP,KAAAqP,UAgBA+E,EAAA/E,EAAAQ,aAAAoE,aAAA5S,KAAAgO,EAAAQ,cAEAR,EAAAQ,aAAAoE,aAAA,SAAA7K,GACA,OAAAgL,EAAAhL,GAAAsR,MAAA,SAAAlb,GACA,OAAA4I,QAAAC,OAlBA,SAAA7I,GACA,OACAzK,KAAA,CACAqe,sBAAA,mBACO5T,EAAAzK,OAAAyK,EAAAzK,KACP+e,QAAAtU,EAAAsU,QACAC,WAAAvU,EAAAuU,WACAliB,SAAA,WACA,OAAAmP,KAAAjM,OAUAoe,CAAA3T,OCrBO,SAASmb,EAAmB3a,GACnC,oBAAAA,EAAAqP,WAIArP,EAAAqP,UAAAQ,eAIA7P,EAAAqP,UAAAQ,cAAA,oBAAA7P,EAAAqP,UAAAQ,eAIA7P,EAAAqP,UAAAQ,aAAA4E,gBAAAzU,EAAAqP,UAAAoF,gBAAApT,KAAArB,EAAAqP,aCRO,SAASuL,EAAkB5a,GAClC,IAAAmR,EAAuB/B,EAAmBpP,GAE1C,GAAAA,EAAA8C,iBACA9C,EAAAqa,kBACAra,EAAAqa,gBAAA,SAAA9M,GACA,OAAAA,IAIAvN,EAAAsL,wBACAtL,EAAAsL,sBAAA,SAAAiC,GACA,OAAAA,IAOA4D,EAAAvV,QAAA,QACA,IAAAif,EAAAzkB,OAAA6jB,yBAAAja,EAAAgM,iBAAAzI,UAAA,WACAnN,OAAAkN,eAAAtD,EAAAgM,iBAAAzI,UAAA,WACAmJ,IAAA,SAAAtV,GACAyjB,EAAAnO,IAAA2M,KAAArY,KAAA5J,GACA,IAAA0jB,EAAA,IAAAna,MAAA,WACAma,EAAAnV,QAAAvO,EACA4J,KAAAZ,cAAA0a,OAQA9a,EAAAmF,cAAA,SAAAnF,EAAAmF,aAAA5B,WACAnN,OAAAkN,eAAAtD,EAAAmF,aAAA5B,UAAA,QACAE,IAAA,WASA,YARAnO,IAAA0L,KAAAkV,QACA,UAAAlV,KAAA5F,MAAAlC,KACA8H,KAAAkV,MAAA,IAAAlW,EAAA+a,cAAA/Z,MACW,UAAAA,KAAA5F,MAAAlC,OACX8H,KAAAkV,MAAA,OAIAlV,KAAAkV,SAOAlW,EAAA+a,gBAAA/a,EAAAgb,gBACAhb,EAAAgb,cAAAhb,EAAA+a,eAGA,IAAAE,EAA8BC,IAAqBlb,EAAAmR,EAAAvV,SAEnDoE,EAAAc,kBAAA,SAAAC,GAMA,OALAA,KAAAoB,aACApB,EAAAoB,WC3DO,SAAAA,EAAAlC,GACP,IAAAmC,GAAA,EAEA,OADAD,EAAAlI,KAAAC,MAAAD,KAAAE,UAAAgI,KACApP,OAAA,SAAAsP,GACA,GAAAA,MAAAC,MAAAD,EAAAE,KAAA,CACA,IAAAD,EAAAD,EAAAC,MAAAD,EAAAE,IAEAF,EAAAE,MAAAF,EAAAC,MACQ2M,EAAgB,wCAGxB,IAAAvM,EAAA,kBAAAJ,EAuBA,OArBAI,IACAJ,EAAA,CAAAA,IAGAA,IAAAvP,OAAA,SAAAwP,GAEA,OAAAA,EAAAvP,QAAA,SACA,SAGA,IAAAmoB,EAAA5Y,EAAA6Y,WAAA,UAAA7Y,EAAA6Y,WAAA,WAAA7Y,EAAA0Q,SAAA,iBAEA,OAAAkI,IAAA/Y,GACAA,GAAA,GACA,GAGA+Y,IAAA/Y,WAEAC,EAAAE,IACAF,EAAAC,KAAAI,EAAAJ,EAAA,GAAAA,IACAA,EAAAtO,UDyB0B2O,CAAgB5B,EAAAoB,WAAAgP,EAAAvV,SACpCoT,EAAS,+BAAAjO,EAAAoB,aAGf,IAAA8Y,EAAAla,IAGAf,EAAAc,kBAAAyC,UAAA0X,EAAA1X,UAEO,SAAA8X,EAAArb,IAEPA,EAAAmF,cAAA,iBAAAnF,EAAAmF,aAAA5B,YACAvD,EAAAmF,aAAA5B,UAAA+X,aAAAtb,EAAAmF,aAAA5B,UAAAgY,UE5EO,SAASC,EAAgBxb,GAChC,IAAAmR,EAAuB/B,EAAmBpP,GAC1CqP,EAAArP,KAAAqP,UACArD,EAAAhM,KAAAgM,iBAQA,GANAqD,EAAA4E,aAAA,SAAAlC,EAAAmC,EAAAC,GAEIlF,EAAgB,gEACpBI,EAAAQ,aAAAoE,aAAAlC,GAAA3F,KAAA8H,EAAAC,MAGAhD,EAAAvV,QAAA,wBAAAyT,EAAAQ,aAAA6C,2BAAA,CACA,IAAAR,EAAA,SAAAvX,EAAAwX,EAAAC,GACAD,KAAAxX,KAAAyX,KAAAzX,KACAA,EAAAyX,GAAAzX,EAAAwX,UACAxX,EAAAwX,KAIAsJ,EAAApM,EAAAQ,aAAAoE,aAAA5S,KAAAgO,EAAAQ,cAYA,GAVAR,EAAAQ,aAAAoE,aAAA,SAAA7K,GAOA,MANA,kBAAAA,GAAA,kBAAAA,EAAA6I,QACA7I,EAAAnP,KAAAC,MAAAD,KAAAE,UAAAiP,IACA8I,EAAA9I,EAAA6I,MAAA,wCACAC,EAAA9I,EAAA6I,MAAA,2CAGAwJ,EAAArS,IAGA4C,KAAAzI,UAAAmY,YAAA,CACA,IAAAC,EAAA3P,EAAAzI,UAAAmY,YAEA1P,EAAAzI,UAAAmY,YAAA,WACA,IAAA/gB,EAAAghB,EAAA9O,MAAA7L,KAAA4J,WAGA,OAFAsH,EAAAvX,EAAA,wCACAuX,EAAAvX,EAAA,0CACAA,GAIA,GAAAqR,KAAAzI,UAAAqY,iBAAA,CACA,IAAAC,EAAA7P,EAAAzI,UAAAqY,iBAEA5P,EAAAzI,UAAAqY,iBAAA,SAAAxS,GAOA,MANA,UAAApI,KAAA9H,MAAA,kBAAAkQ,IACAA,EAAAnP,KAAAC,MAAAD,KAAAE,UAAAiP,IACA8I,EAAA9I,EAAA,wCACA8I,EAAA9I,EAAA,2CAGAyS,EAAAhP,MAAA7L,KAAA,CAAAoI,OCrDO,SAAS0S,EAAmB9b,EAAA+b,GACnC/b,EAAAqP,UAAAQ,cAAA,oBAAA7P,EAAAqP,UAAAQ,cAIA7P,EAAAqP,UAAAQ,eAIA7P,EAAAqP,UAAAQ,aAAA4E,gBAAA,SAAA1C,GACA,IAAAA,MAAAM,MAAA,CACA,IAAA6F,EAAA,IAAA5D,aAAA,0DAIA,OAHA4D,EAAAnjB,KAAA,gBAEAmjB,EAAAxY,KAAA,EACA0I,QAAAC,OAAA6P,GAWA,OARA,IAAAnG,EAAAM,MACAN,EAAAM,MAAA,CACA2J,YAAAD,GAGAhK,EAAAM,MAAA2J,YAAAD,EAGA/b,EAAAqP,UAAAQ,aAAAoE,aAAAlC,KCvBO,SAASkK,EAAWjc,GAC3B,kBAAAA,KAAAkc,eAAA,aAAAlc,EAAAkc,cAAA3Y,aAAA,gBAAAvD,EAAAkc,cAAA3Y,YACAnN,OAAAkN,eAAAtD,EAAAkc,cAAA3Y,UAAA,eACAE,IAAA,WACA,OACAjD,SAAAQ,KAAAR,aAMO,SAAS2b,EAAkBnc,GAClC,IAAAmR,EAAuB/B,EAAmBpP,GAE1C,qBAAAA,MAAAc,mBAAAd,EAAAoc,sBAAA,EAIApc,EAAAc,mBAAAd,EAAAoc,uBAEApc,EAAAc,kBAAAd,EAAAoc,sBAIA,iEAAA7lB,QAAA,SAAA6K,GACA,IAAAkM,EAAAtN,EAAAc,kBAAAyC,UAAAnC,GAEApB,EAAAc,kBAAAyC,UAAAnC,GAAA,WAEA,OADAwJ,UAAA,2BAAAxJ,EAAApB,EAAAqa,gBAAAra,EAAAsL,uBAAAV,UAAA,IACA0C,EAAAT,MAAA7L,KAAA4J,cAIA,IAAA0P,EAAAta,EAAAc,kBAAAyC,UAAAqI,gBAEA5L,EAAAc,kBAAAyC,UAAAqI,gBAAA,WACA,OAAAhB,UAAA,GAQA0P,EAAAzN,MAAA7L,KAAA4J,YAPAA,UAAA,IACAA,UAAA,GAAAiC,MAAA,MAGAzE,QAAAQ,YAMA,IAAAyT,EAAA,CACArP,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAC,eAAA,kBACAC,gBAAA,oBAEAkP,EAAAtc,EAAAc,kBAAAyC,UAAAuI,SAEA9L,EAAAc,kBAAAyC,UAAAuI,SAAA,SAAAC,EAAAwQ,EAAAC,GACA,OAAAF,EAAAzP,MAAA7L,KAAA,CAAA+K,GAAA,OAAAK,KAAA,SAAAI,GACA,GAAA2E,EAAAvV,QAAA,KAAA2gB,EAGA,IACA/P,EAAAjW,QAAA,SAAAkW,GACAA,EAAA3Y,KAAAuoB,EAAA5P,EAAA3Y,OAAA2Y,EAAA3Y,OAES,MAAA0L,GACT,iBAAAA,EAAAzK,KACA,MAAAyK,EAIAgN,EAAAjW,QAAA,SAAAkW,EAAA1Y,GACAyY,EAAAE,IAAA3Y,EAAAqC,OAAA8Q,OAAA,GAAyCuF,EAAA,CACzC3Y,KAAAuoB,EAAA5P,EAAA3Y,OAAA2Y,EAAA3Y,UAMA,OAAA0Y,IACKJ,KAAAmQ,EAAAC,KAGE,SAAAC,EAAAzc,GACP,qBAAAA,KAAAc,mBAAAd,EAAAmF,gBAIAnF,EAAAmF,cAAA,aAAAnF,EAAAmF,aAAA5B,WAAA,CAIA,IAAAqT,EAAA5W,EAAAc,kBAAAyC,UAAA2C,WAEA0Q,IACA5W,EAAAc,kBAAAyC,UAAA2C,WAAA,WACA,IAAA0P,EAAA5U,KAEA8V,EAAAF,EAAA/J,MAAA7L,KAAA,IAIA,OAHA8V,EAAAvgB,QAAA,SAAAsP,GACA,OAAAA,EAAAuQ,IAAAR,IAEAkB,IAIA,IAAAR,EAAAtW,EAAAc,kBAAAyC,UAAApD,SAEAmW,IACAtW,EAAAc,kBAAAyC,UAAApD,SAAA,WACA,IAAA0F,EAAAyQ,EAAAzJ,MAAA7L,KAAA4J,WAEA,OADA/E,EAAAuQ,IAAApV,KACA6E,IAIA7F,EAAAmF,aAAA5B,UAAAuI,SAAA,WACA,OAAA9K,KAAA5F,MAAA4F,KAAAoV,IAAAtK,SAAA9K,KAAA5F,OAAAgN,QAAAQ,QAAA,IAAA2D,OAGO,SAAAmQ,EAAA1c,GACP,qBAAAA,KAAAc,mBAAAd,EAAAmF,gBAIAnF,EAAAmF,cAAA,aAAAnF,EAAAuJ,eAAAhG,WAAA,CAIA,IAAAuU,EAAA9X,EAAAc,kBAAAyC,UAAA4C,aAEA2R,IACA9X,EAAAc,kBAAAyC,UAAA4C,aAAA,WACA,IAAAsQ,EAAAzV,KAEAgX,EAAAF,EAAAjL,MAAA7L,KAAA,IAIA,OAHAgX,EAAAzhB,QAAA,SAAAiK,GACA,OAAAA,EAAA4V,IAAAK,IAEAuB,IAIEhK,EAA6BhO,EAAA,iBAAAR,GAE/B,OADAA,EAAAgB,SAAA4V,IAAA5W,EAAAyY,WACAzY,IAGAQ,EAAAuJ,eAAAhG,UAAAuI,SAAA,WACA,OAAA9K,KAAAoV,IAAAtK,SAAA9K,KAAA5F,SAGO,SAAAuhB,EAAA3c,IACPA,EAAAc,mBAAA,iBAAAd,EAAAc,kBAAAyC,YAIAvD,EAAAc,kBAAAyC,UAAA0C,aAAA,SAAA9K,GACA,IAAAwb,EAAA3V,KAEIiO,EAAgB,8BACpBjO,KAAAkF,aAAA3P,QAAA,SAAAsP,GACAA,EAAAzK,OAAAD,EAAAkK,YAAA4N,SAAApN,EAAAzK,QACAub,EAAA/Q,YAAAC,OAKO,SAAA+W,EAAA5c,GAGPA,EAAA6c,cAAA7c,EAAA8c,iBACA9c,EAAA8c,eAAA9c,EAAA6c,aChLO,SAAAE,EAAA/c,GACP,qBAAAA,KAAAc,kBAAA,CAcA,GAVA,oBAAAd,EAAAc,kBAAAyC,YACAvD,EAAAc,kBAAAyC,UAAAgB,gBAAA,WAKA,OAJAvD,KAAAgc,gBACAhc,KAAAgc,cAAA,IAGAhc,KAAAgc,kBAIA,cAAAhd,EAAAc,kBAAAyC,WAAA,CACA,IAAA0Z,EAAAjd,EAAAc,kBAAAyC,UAAApD,SAEAH,EAAAc,kBAAAyC,UAAA6B,UAAA,SAAAjK,GACA,IAAAya,EAAA5U,KAEAA,KAAAgc,gBACAhc,KAAAgc,cAAA,IAGAhc,KAAAgc,cAAA/J,SAAA9X,IACA6F,KAAAgc,cAAAxoB,KAAA2G,GAGAA,EAAAkK,YAAA9O,QAAA,SAAA6E,GACA,OAAA6hB,EAAA5D,KAAAzD,EAAAxa,EAAAD,MAIA6E,EAAAc,kBAAAyC,UAAApD,SAAA,SAAA/E,EAAAD,GASA,OARAA,IACA6F,KAAAgc,cAEShc,KAAAgc,cAAA/J,SAAA9X,IACT6F,KAAAgc,cAAAxoB,KAAA2G,GAFA6F,KAAAgc,cAAA,CAAA7hB,IAMA8hB,EAAA5D,KAAArY,KAAA5F,EAAAD,IAIA,iBAAA6E,EAAAc,kBAAAyC,YACAvD,EAAAc,kBAAAyC,UAAA0C,aAAA,SAAA9K,GACA,IAAAsb,EAAAzV,KAEAA,KAAAgc,gBACAhc,KAAAgc,cAAA,IAGA,IAAAxqB,EAAAwO,KAAAgc,cAAAhqB,QAAAmI,GAEA,QAAA3I,EAAA,CAIAwO,KAAAgc,cAAAhX,OAAAxT,EAAA,GAEA,IAAA0qB,EAAA/hB,EAAAkK,YACArE,KAAAkF,aAAA3P,QAAA,SAAAsP,GACAqX,EAAAjK,SAAApN,EAAAzK,QACAqb,EAAA7Q,YAAAC,SAMO,SAAAsX,EAAAnd,GACP,qBAAAA,KAAAc,oBAIA,qBAAAd,EAAAc,kBAAAyC,YACAvD,EAAAc,kBAAAyC,UAAAiB,iBAAA,WACA,OAAAxD,KAAAoc,eAAApc,KAAAoc,eAAA,OAIA,gBAAApd,EAAAc,kBAAAyC,YAAA,CACAnN,OAAAkN,eAAAtD,EAAAc,kBAAAyC,UAAA,eACAE,IAAA,WACA,OAAAzC,KAAAqc,cAEA3Q,IAAA,SAAAgJ,GACA,IAAAiB,EAAA3V,KAEAA,KAAAqc,eACArc,KAAA6F,oBAAA,YAAA7F,KAAAqc,cACArc,KAAA6F,oBAAA,QAAA7F,KAAAsc,mBAGAtc,KAAA0E,iBAAA,YAAA1E,KAAAqc,aAAA3H,GACA1U,KAAA0E,iBAAA,QAAA1E,KAAAsc,iBAAA,SAAA9d,GACAA,EAAAiB,QAAAlK,QAAA,SAAA4E,GAKA,GAJAwb,EAAAyG,iBACAzG,EAAAyG,eAAA,KAGAzG,EAAAyG,eAAAnK,SAAA9X,GAAA,CAIAwb,EAAAyG,eAAA5oB,KAAA2G,GAEA,IAAAiJ,EAAA,IAAAzD,MAAA,aACAyD,EAAAjJ,SAEAwb,EAAAvW,cAAAgE,WAKA,IAAAuR,EAAA3V,EAAAc,kBAAAyC,UAAAzE,qBAEAkB,EAAAc,kBAAAyC,UAAAzE,qBAAA,WACA,IAAAyB,EAAAS,KAsBA,OApBAA,KAAAsc,kBACAtc,KAAA0E,iBAAA,QAAA1E,KAAAsc,iBAAA,SAAA9d,GACAA,EAAAiB,QAAAlK,QAAA,SAAA4E,GAKA,GAJAoF,EAAA6c,iBACA7c,EAAA6c,eAAA,MAGA7c,EAAA6c,eAAApqB,QAAAmI,IAAA,IAIAoF,EAAA6c,eAAA5oB,KAAA2G,GAEA,IAAAiJ,EAAA,IAAAzD,MAAA,aACAyD,EAAAjJ,SACAoF,EAAAH,cAAAgE,QAKAuR,EAAA9I,MAAAtM,EAAAqK,aAIO,SAAA2S,EAAAvd,GACP,qBAAAA,KAAAc,kBAAA,CAIA,IAAAyC,EAAAvD,EAAAc,kBAAAyC,UACAiH,EAAAjH,EAAAiH,YACAe,EAAAhI,EAAAgI,aACA1M,EAAA0E,EAAA1E,oBACAC,EAAAyE,EAAAzE,qBACA8M,EAAArI,EAAAqI,gBAEArI,EAAAiH,YAAA,SAAAyM,EAAAuG,GACA,IAAAC,EAAA7S,UAAA5W,QAAA,EAAA4W,UAAA,GAAAA,UAAA,GACA8S,EAAAlT,EAAAqC,MAAA7L,KAAA,CAAAyc,IAEA,OAAAD,GAIAE,EAAAtR,KAAA6K,EAAAuG,GACApV,QAAAQ,WAJA8U,GAOAna,EAAAgI,aAAA,SAAA0L,EAAAuG,GACA,IAAAC,EAAA7S,UAAA5W,QAAA,EAAA4W,UAAA,GAAAA,UAAA,GACA8S,EAAAnS,EAAAsB,MAAA7L,KAAA,CAAAyc,IAEA,OAAAD,GAIAE,EAAAtR,KAAA6K,EAAAuG,GACApV,QAAAQ,WAJA8U,GAOA,IAAAC,EAAA,SAAAllB,EAAAwe,EAAAuG,GACA,IAAAE,EAAA7e,EAAAgO,MAAA7L,KAAA,CAAAvI,IAEA,OAAA+kB,GAIAE,EAAAtR,KAAA6K,EAAAuG,GACApV,QAAAQ,WAJA8U,GAOAna,EAAA1E,oBAAA8e,EAEAA,EAAA,SAAAllB,EAAAwe,EAAAuG,GACA,IAAAE,EAAA5e,EAAA+N,MAAA7L,KAAA,CAAAvI,IAEA,OAAA+kB,GAIAE,EAAAtR,KAAA6K,EAAAuG,GACApV,QAAAQ,WAJA8U,GAOAna,EAAAzE,qBAAA6e,EAEAA,EAAA,SAAAxqB,EAAA8jB,EAAAuG,GACA,IAAAE,EAAA9R,EAAAiB,MAAA7L,KAAA,CAAA7N,IAEA,OAAAqqB,GAIAE,EAAAtR,KAAA6K,EAAAuG,GACApV,QAAAQ,WAJA8U,GAOAna,EAAAqI,gBAAA+R,GAEO,SAASC,EAAgB5d,GAChC,IAAAqP,EAAArP,KAAAqP,UAEA,GAAAA,EAAAQ,cAAAR,EAAAQ,aAAAoE,aAAA,CAEA,IAAApE,EAAAR,EAAAQ,aAEAgO,EAAAhO,EAAAoE,aAAA5S,KAAAwO,GAEAR,EAAAQ,aAAAoE,aAAA,SAAAlC,GACA,OAAA8L,EAAAC,EAAA/L,MAIA1C,EAAA4E,cAAA5E,EAAAQ,cAAAR,EAAAQ,aAAAoE,eACA5E,EAAA4E,aAAA,SAAAlC,EAAAzD,EAAAyP,GACA1O,EAAAQ,aAAAoE,aAAAlC,GAAA3F,KAAAkC,EAAAyP,IACK1c,KAAAgO,IAGE,SAAAyO,EAAA/L,GACP,OAAAA,QAAAzc,IAAAyc,EAAAM,MACAjc,OAAA8Q,OAAA,GAA2B6K,EAAA,CAC3BM,MAAavC,EAAmBiC,EAAAM,SAIhCN,EAEO,SAAAiM,EAAAhe,GAEP,IAAAie,EAAAje,EAAAc,kBAEAd,EAAAc,kBAAA,SAAAod,EAAAC,GACA,GAAAD,KAAA/b,WAAA,CAGA,IAFA,IAAAic,EAAA,GAEArqB,EAAA,EAAqBA,EAAAmqB,EAAA/b,WAAAnO,OAAgCD,IAAA,CACrD,IAAAsO,EAAA6b,EAAA/b,WAAApO,IAEAsO,EAAAgc,eAAA,SAAAhc,EAAAgc,eAAA,QACUpP,EAAgB,yCAC1B5M,EAAApI,KAAAC,MAAAD,KAAAE,UAAAkI,KACAC,KAAAD,EAAAE,WACAF,EAAAE,IACA6b,EAAA5pB,KAAA6N,IAEA+b,EAAA5pB,KAAA0pB,EAAA/b,WAAApO,IAIAmqB,EAAA/b,WAAAic,EAGA,WAAAH,EAAAC,EAAAC,IAGAne,EAAAc,kBAAAyC,UAAA0a,EAAA1a,UAEA,wBAAAvD,EAAAc,mBACA1K,OAAAkN,eAAAtD,EAAAc,kBAAA,uBACA2C,IAAA,WACA,OAAAwa,EAAAK,uBAKO,SAAAC,EAAAve,GAEP,kBAAAA,KAAAc,mBAAA,aAAAd,EAAAkc,cAAA3Y,YAEAvD,EAAAwe,gBACApoB,OAAAkN,eAAAtD,EAAAkc,cAAA3Y,UAAA,eACAE,IAAA,WACA,OACAjD,SAAAQ,KAAAR,aAMO,SAAAie,EAAAze,GACP,IAAA0e,EAAA1e,EAAAc,kBAAAyC,UAAAiH,YAEAxK,EAAAc,kBAAAyC,UAAAiH,YAAA,SAAAG,GACA,GAAAA,EAAA,CACA,qBAAAA,EAAAI,sBAEAJ,EAAAI,sBAAAJ,EAAAI,qBAGA,IAAA4T,EAAA3d,KAAA4d,kBAAAxf,KAAA,SAAAtD,GACA,gBAAAA,EAAA0E,SAAApF,MAAAlC,QAGA,IAAAyR,EAAAI,qBAAA4T,EACA,aAAAA,EAAAjpB,UACAipB,EAAAE,aACAF,EAAAE,aAAA,YAEAF,EAAAjpB,UAAA,WAES,aAAAipB,EAAAjpB,YACTipB,EAAAE,aACAF,EAAAE,aAAA,YAEAF,EAAAjpB,UAAA,aAGO,IAAAiV,EAAAI,qBAAA4T,GACP3d,KAAA8d,eAAA,SAGA,qBAAAnU,EAAAK,sBAEAL,EAAAK,sBAAAL,EAAAK,qBAGA,IAAA+T,EAAA/d,KAAA4d,kBAAAxf,KAAA,SAAAtD,GACA,gBAAAA,EAAA0E,SAAApF,MAAAlC,QAGA,IAAAyR,EAAAK,qBAAA+T,EACA,aAAAA,EAAArpB,UACAqpB,EAAAF,aACAE,EAAAF,aAAA,YAEAE,EAAArpB,UAAA,WAES,aAAAqpB,EAAArpB,YACTqpB,EAAAF,aACAE,EAAAF,aAAA,YAEAE,EAAArpB,UAAA,aAGO,IAAAiV,EAAAK,qBAAA+T,GACP/d,KAAA8d,eAAA,SAIA,OAAAJ,EAAA7R,MAAA7L,KAAA4J,qCCvWO,SAAAoU,GAAAhf,GAGP,GAAAA,EAAAqa,mBAAAra,EAAAqa,iBAAA,eAAAra,EAAAqa,gBAAA9W,WAAA,CAIA,IAAA0b,EAAAjf,EAAAqa,gBAEAra,EAAAqa,gBAAA,SAAA9M,GAOA,GALA,kBAAAA,KAAApa,WAAA,IAAAoa,EAAApa,UAAAH,QAAA,SACAua,EAAAtT,KAAAC,MAAAD,KAAAE,UAAAoT,KACApa,UAAAoa,EAAApa,UAAArB,OAAA,IAGAyb,EAAApa,WAAAoa,EAAApa,UAAAa,OAAA,CAEA,IAAAkrB,EAAA,IAAAD,EAAA1R,GACA4R,EAA4BC,GAAAjN,EAAQlf,eAAAsa,EAAApa,WACpCksB,EAAAjpB,OAAA8Q,OAAAgY,EAAAC,GAWA,OATAE,EAAAlY,OAAA,WACA,OACAhU,UAAAksB,EAAAlsB,UACA4T,OAAAsY,EAAAtY,OACAV,cAAAgZ,EAAAhZ,cACAhS,iBAAAgrB,EAAAhrB,mBAIAgrB,EAGA,WAAAJ,EAAA1R,IAGAvN,EAAAqa,gBAAA9W,UAAA0b,EAAA1b,UAGEyK,EAA6BhO,EAAA,wBAAAR,GAQ/B,OAPAA,EAAArM,WACAiD,OAAAkN,eAAA9D,EAAA,aACApI,MAAA,IAAA4I,EAAAqa,gBAAA7a,EAAArM,WACAmT,SAAA,UAIA9G,KAGO,SAAA8f,GAAAtf,GACP,IAAAA,EAAAuf,kBAAAvf,EAAAc,kBAAA,CAIA,IAAAqQ,EAAuB/B,EAAmBpP,GAE1C,SAAAA,EAAAc,kBAAAyC,WACAnN,OAAAkN,eAAAtD,EAAAc,kBAAAyC,UAAA,QACAE,IAAA,WACA,2BAAAzC,KAAAwe,MAAA,KAAAxe,KAAAwe,SAKA,IAoFA7J,EAAA3V,EAAAc,kBAAAyC,UAAAzE,qBAEAkB,EAAAc,kBAAAyC,UAAAzE,qBAAA,WAGA,GAFAkC,KAAAwe,MAAA,KAvFA,SAAA/mB,GACA,IAAAA,MAAAlE,IACA,SAGA,IAAA7B,EAAmB0sB,GAAAjN,EAAQ7f,cAAAmG,EAAAlE,KAE3B,OADA7B,EAAAE,QACAF,EAAAqgB,KAAA,SAAAtb,GACA,IAAAgoB,EAAkBL,GAAAjN,EAAQ1V,WAAAhF,GAC1B,OAAAgoB,GAAA,gBAAAA,EAAAvmB,OAAA,IAAAumB,EAAAjsB,SAAAR,QAAA,UAgFA0sB,CAAA9U,UAAA,KAEA,IAMA+U,EANAC,EA9EA,SAAAnnB,GAEA,IAAAsV,EAAAtV,EAAAlE,IAAAwZ,MAAA,mCAEA,UAAAA,KAAA/Z,OAAA,EACA,SAGA,IAAA4H,EAAArI,SAAAwa,EAAA,OAEA,OAAAnS,OAAA,EAAAA,EAoEAikB,CAAAjV,UAAA,IAEAkV,EAnEA,SAAAC,GAKA,IAAAC,EAAA,MAyBA,MAvBA,YAAA7O,EAAA5B,UAKAyQ,EAJA7O,EAAAvV,QAAA,IACA,IAAAmkB,EAGA,MAIA,WAEO5O,EAAAvV,QAAA,GAKP,KAAAuV,EAAAvV,QAAA,YAGA,YAIAokB,EAqCAC,CAAAL,GAEAM,EApCA,SAAAznB,EAAAsnB,GAGA,IAAAJ,EAAA,MAIA,YAAAxO,EAAA5B,SAAA,KAAA4B,EAAAvV,UACA+jB,EAAA,OAGA,IAAA5R,EAAgBqR,GAAAjN,EAAQtf,YAAA4F,EAAAlE,IAAA,uBAWxB,OATAwZ,EAAA/Z,OAAA,EACA2rB,EAAApsB,SAAAwa,EAAA,GAAAjc,OAAA,QACK,YAAAqf,EAAA5B,UAAA,IAAAwQ,IAILJ,EAAA,YAGAA,EAcAQ,CAAAvV,UAAA,GAAAgV,GAKAD,EADA,IAAAG,GAAA,IAAAI,EACAE,OAAAC,kBACO,IAAAP,GAAA,IAAAI,EACPvuB,KAAA8f,IAAAqO,EAAAI,GAEAvuB,KAAA2M,IAAAwhB,EAAAI,GAKA,IAAAI,EAAA,GACAlqB,OAAAkN,eAAAgd,EAAA,kBACA7c,IAAA,WACA,OAAAkc,KAGA3e,KAAAwe,MAAAc,EAGA,OAAA3K,EAAA9I,MAAA7L,KAAA4J,aAGO,SAAA2V,GAAAvgB,GACP,GAAAA,EAAAc,mBAAA,sBAAAd,EAAAc,kBAAAyC,UAAA,CAsBA,IAAAid,EAAAxgB,EAAAc,kBAAAyC,UAAAkd,kBAEAzgB,EAAAc,kBAAAyC,UAAAkd,kBAAA,WACA,IAAAC,EAAAF,EAAA3T,MAAA7L,KAAA4J,WAEA,OADA+V,EAAAD,EAAA1f,MACA0f,GAGE1S,EAA6BhO,EAAA,uBAAAR,GAE/B,OADAmhB,EAAAnhB,EAAAohB,QAAAphB,EAAAgb,QACAhb,IAzBA,SAAAmhB,EAAAE,EAAAtgB,GACA,IAAAugB,EAAAD,EAAA9Y,KAEA8Y,EAAA9Y,KAAA,WACA,IAAAgI,EAAAnF,UAAA,GACA5W,EAAA+b,EAAA/b,QAAA+b,EAAAgR,MAAAhR,EAAAiR,WAEA,YAAAH,EAAAI,YAAA1gB,EAAA+f,MAAAtsB,EAAAuM,EAAA+f,KAAAX,eACA,UAAA7f,UAAA,4CAAAS,EAAA+f,KAAAX,eAAA,WAGA,OAAAmB,EAAAjU,MAAAgU,EAAAjW,aAyBO,SAAAsW,GAAAlhB,GACP,GAAAA,EAAAc,qBAAA,oBAAAd,EAAAc,kBAAAyC,WAAA,CAIA,IAAA4K,EAAAnO,EAAAc,kBAAAyC,UACAnN,OAAAkN,eAAA6K,EAAA,mBACA1K,IAAA,WACA,OACA2G,UAAA,YACAF,SAAA,cACOlJ,KAAAY,qBAAAZ,KAAAY,oBAEPgN,YAAA,EACApL,cAAA,IAEApN,OAAAkN,eAAA6K,EAAA,2BACA1K,IAAA,WACA,OAAAzC,KAAAmgB,0BAAA,MAEAzU,IAAA,SAAA4B,GACAtN,KAAAmgB,2BACAngB,KAAA6F,oBAAA,wBAAA7F,KAAAmgB,iCACAngB,KAAAmgB,0BAGA7S,GACAtN,KAAA0E,iBAAA,wBAAA1E,KAAAmgB,yBAAA7S,IAGAM,YAAA,EACApL,cAAA,IAEA,+CAAAjN,QAAA,SAAA6K,GACA,IAAAggB,EAAAjT,EAAA/M,GAEA+M,EAAA/M,GAAA,WAiBA,OAhBAJ,KAAAqgB,6BACArgB,KAAAqgB,2BAAA,SAAA7hB,GACA,IAAAe,EAAAf,EAAAgb,OAEA,GAAAja,EAAA+gB,uBAAA/gB,EAAAsB,gBAAA,CACAtB,EAAA+gB,qBAAA/gB,EAAAsB,gBACA,IAAA0f,EAAA,IAAA5gB,MAAA,wBAAAnB,GACAe,EAAAH,cAAAmhB,GAGA,OAAA/hB,GAGAwB,KAAA0E,iBAAA,2BAAA1E,KAAAqgB,6BAGAD,EAAAvU,MAAA7L,KAAA4J,eAIO,SAAA4W,GAAAxhB,GAEP,GAAAA,EAAAc,kBAAA,CAIA,IAAAqQ,EAAuB/B,EAAmBpP,GAE1C,gBAAAmR,EAAA5B,SAAA4B,EAAAvV,SAAA,KAIA,IAAA6lB,EAAAzhB,EAAAc,kBAAAyC,UAAAzE,qBAEAkB,EAAAc,kBAAAyC,UAAAzE,qBAAA,SAAAuM,GAOA,OANAA,KAAA9W,MAAA,IAAA8W,EAAA9W,IAAAvB,QAAA,4BACAqY,EAAA9W,IAAA8W,EAAA9W,IAAApC,MAAA,MAAAY,OAAA,SAAAV,GACA,+BAAAA,EAAAH,SACOwC,KAAA,OAGP+sB,EAAA5U,MAAA7L,KAAA4J,cCtTA,IAAI8W,GCGG,WACP,IACA1hB,GADA4K,UAAA5W,OAAA,QAAAsB,IAAAsV,UAAA,GAAAA,UAAA,OACA5K,OAEAyd,EAAA7S,UAAA5W,OAAA,QAAAsB,IAAAsV,UAAA,GAAAA,UAAA,IACA+W,YAAA,EACAC,aAAA,EACAC,UAAA,EACAC,YAAA,GAGAC,EAAgB/S,EAChBmC,EAAuB/B,EAAmBpP,GAC1CgiB,EAAA,CACA7Q,iBACA8Q,WAAgBC,EAChBvU,eAAoBA,EACpBkB,WAAgBA,EAChBE,gBAAqBA,GAGrB,OAAAoC,EAAA5B,SACA,aACA,IAAW4S,IAAe/H,IAA6BqD,EAAAkE,WAEvD,OADAI,EAAA,wDACAC,EAGAD,EAAA,+BAEAC,EAAAI,YAA4BD,EACtBjR,EAA2BlR,GAC3BsV,EAA0BtV,GAC1Boa,EAA6Bpa,GAC7BwV,EAAsBxV,GACtB4Y,EAAkC5Y,GAClC+V,EAAiC/V,GACjC+W,EAAuB/W,GACvB4X,EAAqC5X,GACrCua,EAA+Bva,GAC/Bgf,GAA8Bhf,GAC9BkhB,GAA8BlhB,GAC9Bsf,GAA6Btf,GAC7BugB,GAAiCvgB,GACjCwhB,GAAiCxhB,GACvC,MAEA,cACA,IAAWqiB,IAAgBlG,IAA8BsB,EAAAmE,YAEzD,OADAG,EAAA,yDACAC,EAGAD,EAAA,gCAEAC,EAAAI,YAA4BC,EACtB7G,EAA4Bxb,GAC5Bmc,EAA8Bnc,GAC9Bic,EAAuBjc,GACvB2c,EAA4B3c,GAC5Byc,EAA8Bzc,GAC9B0c,EAAgC1c,GAChC4c,EAA8B5c,GAC9Bgf,GAA8Bhf,GAC9BkhB,GAA8BlhB,GAC9Bsf,GAA6Btf,GAC7BugB,GAAiCvgB,GACvC,MAEA,WACA,IAAWsiB,IAAa1H,IAA2B6C,EAAAoE,SAEnD,OADAE,EAAA,yDACAC,EAGAD,EAAA,6BAEAC,EAAAI,YAA4BE,EACtB7H,EAAyBza,GACzB2a,EAA4B3a,GAC5B4a,EAA2B5a,GAC3Bqb,EAAyBrb,GAEzBsf,GAA6Btf,GAC7BugB,GAAiCvgB,GACvC,MAEA,aACA,IAAWuiB,IAAU9E,EAAAqE,WAErB,OADAC,EAAA,wDACAC,EAGAD,EAAA,+BAEAC,EAAAI,YAA4BG,EACtBvE,EAA+Bhe,GAC/Bye,EAAgCze,GAChCud,EAA2Bvd,GAC3B+c,EAA8B/c,GAC9Bmd,EAA+Bnd,GAC/Bue,EAAoCve,GACpC4d,EAA2B5d,GAC3Bgf,GAA8Bhf,GAC9Bsf,GAA6Btf,GAC7BugB,GAAiCvgB,GACjCwhB,GAAiCxhB,GACvC,MAEA,QACA+hB,EAAA,wBAIA,OAAAC,EDrHcQ,CAAc,CAC5BxiB,gBAEeyiB,EAAA","file":"static/js/3.65bb98f5.chunk.js","sourcesContent":["/* eslint-env node */\n'use strict'; // SDP helpers.\n\nvar SDPUtils = {}; // Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\n\nSDPUtils.generateIdentifier = function () {\n  return Math.random().toString(36).substr(2, 10);\n}; // The RTCP CNAME used by all peerconnections from the same JS.\n\n\nSDPUtils.localCName = SDPUtils.generateIdentifier(); // Splits SDP into lines, dealing with both CRLF and LF.\n\nSDPUtils.splitLines = function (blob) {\n  return blob.trim().split('\\n').map(function (line) {\n    return line.trim();\n  });\n}; // Splits SDP into sessionpart and mediasections. Ensures CRLF.\n\n\nSDPUtils.splitSections = function (blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function (part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n}; // returns the session description.\n\n\nSDPUtils.getDescription = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n}; // returns the individual media sections.\n\n\nSDPUtils.getMediaSections = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n}; // Returns lines that start with a certain prefix.\n\n\nSDPUtils.matchPrefix = function (blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function (line) {\n    return line.indexOf(prefix) === 0;\n  });\n}; // Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n\n\nSDPUtils.parseCandidate = function (line) {\n  var parts; // Parse both variants.\n\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4],\n    // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n\n        candidate.usernameFragment = parts[i + 1];\n        break;\n\n      default:\n        // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n\n  return candidate;\n}; // Translates a candidate object into SDP candidate attribute.\n\n\nSDPUtils.writeCandidate = function (candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n\n  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n\n  return 'candidate:' + sdp.join(' ');\n}; // Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\n\n\nSDPUtils.parseIceOptions = function (line) {\n  return line.substr(14).split(' ');\n}; // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\n\n\nSDPUtils.parseRtpMap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n\n  };\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // legacy alias, got renamed back to channels in ORTC.\n\n  parsed.numChannels = parsed.channels;\n  return parsed;\n}; // Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\n\n\nSDPUtils.writeRtpMap = function (codec) {\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n}; // Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\n\n\nSDPUtils.parseExtmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n}; // Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\n\n\nSDPUtils.writeExtmap = function (headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\\r\\n';\n}; // Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\n\n\nSDPUtils.parseFmtp = function (line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n\n  return parsed;\n}; // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n\n\nSDPUtils.writeFmtp = function (codec) {\n  var line = '';\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function (param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n\n  return line;\n}; // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\n\n\nSDPUtils.parseRtcpFb = function (line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n}; // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\n\n\nSDPUtils.writeRtcpFb = function (codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function (fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n    });\n  }\n\n  return lines;\n}; // Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\n\n\nSDPUtils.parseSsrcMedia = function (line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function (line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function (ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n}; // Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\n\n\nSDPUtils.getMid = function (mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function (line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(),\n    // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n}; // Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\n\n\nSDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:'); // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n}; // Serializes DTLS parameters to SDP.\n\n\nSDPUtils.writeDtlsParameters = function (params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function (fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n}; // Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\n\n\nSDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection); // Search in session part, too.\n\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function (line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function (line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n}; // Serializes ICE parameters to SDP.\n\n\nSDPUtils.writeIceParameters = function (params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n}; // Parses the SDP media section and returns RTCRtpParameters.\n\n\nSDPUtils.parseRtpParameters = function (mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n\n  for (var i = 3; i < mline.length; i++) {\n    // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' '); // Only the first a=fmtp:<pt> is considered.\n\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec); // parse FEC mechanisms from rtpmap lines.\n\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n\n        default:\n          // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  }); // FIXME: parse rtcp.\n\n  return description;\n}; // Generates parts of the SDP media section describing the capabilities /\n// parameters.\n\n\nSDPUtils.writeRtpDescription = function (kind, caps) {\n  var sdp = ''; // Build the mline.\n\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function (codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n'; // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n\n  caps.codecs.forEach(function (codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function (codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function (extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  } // FIXME: write fecMechanisms.\n\n\n  return sdp;\n}; // Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\n\n\nSDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1; // filter a=ssrc:... cname:, ignore PlanB-msid\n\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(function (line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function (part) {\n      return parseInt(part, 10);\n    });\n  });\n\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function (codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {\n          ssrc: secondarySsrc\n        };\n      }\n\n      encodingParameters.push(encParam);\n\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  } // we support both b=AS and b=TIAS but interpret AS as TIAS.\n\n\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n    } else {\n      bandwidth = undefined;\n    }\n\n    encodingParameters.forEach(function (params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n\n  return encodingParameters;\n}; // parses http://draft.ortc.org/#rtcrtcpparameters*\n\n\nSDPUtils.parseRtcpParameters = function (mediaSection) {\n  var rtcpParameters = {}; // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (obj) {\n    return obj.attribute === 'cname';\n  })[0];\n\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  } // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n\n\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0; // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n  return rtcpParameters;\n}; // parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\n\n\nSDPUtils.parseMsid = function (mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n}; // Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\n\n\nSDPUtils.generateSessionId = function () {\n  return Math.random().toString().substr(2, 21);\n}; // Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\n\n\nSDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n\n  var user = sessUser || 'thisisadapterortc'; // FIXME: sess-id should be an NTP timestamp.\n\n  return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function (transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps); // Map ICE parameters (ufrag, pwd) to SDP.\n\n  sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters()); // Map DTLS parameters to SDP.\n\n  sdp += SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(), type === 'offer' ? 'actpass' : 'active');\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' + transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid; // for Chrome.\n\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' ' + msid;\n\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' + transceiver.sendEncodingParameters[0].ssrc + ' ' + transceiver.sendEncodingParameters[0].rtx.ssrc + '\\r\\n';\n    }\n  } // FIXME: this should be written by writeRtpDescription.\n\n\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n\n  return sdp;\n}; // Gets the direction from the mediaSection or the sessionpart.\n\n\nSDPUtils.getDirection = function (mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n\n      default: // FIXME: What should happen here?\n\n    }\n  }\n\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function (mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function (mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n}; // a very naive interpretation of a valid SDP.\n\n\nSDPUtils.isValidSDP = function (blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n\n  var lines = SDPUtils.splitLines(blob);\n\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    } // TODO: check the modifier a bit more.\n\n  }\n\n  return true;\n}; // Expose public methods.\n\n\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps); // Map ICE parameters (ufrag, pwd) to SDP.\n\n  sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters()); // Map DTLS parameters to SDP.\n\n  sdp += SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(), type === 'offer' ? 'actpass' : dtlsRole || 'active');\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId || transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId; // spec.\n\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' + trackId + '\\r\\n';\n    sdp += 'a=' + msid; // for Chrome. Legacy should no longer be required.\n\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' ' + msid; // RTX\n\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' + transceiver.sendEncodingParameters[0].ssrc + ' ' + transceiver.sendEncodingParameters[0].rtx.ssrc + '\\r\\n';\n    }\n  } // FIXME: this should be written by writeRtpDescription.\n\n\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n\n  return sdp;\n} // Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\n\n\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function (server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n\n      var isString = typeof urls === 'string';\n\n      if (isString) {\n        urls = [urls];\n      }\n\n      urls = urls.filter(function (url) {\n        var validTurn = url.indexOf('turn:') === 0 && url.indexOf('transport=udp') !== -1 && url.indexOf('turn:[') === -1 && !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 && url.indexOf('?transport=udp') === -1;\n      });\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n} // Determines the intersection of local and remote capabilities.\n\n\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function findCodecByPayloadType(pt, codecs) {\n    pt = parseInt(pt, 10);\n\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt || codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function rtxCapabilityMatches(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec && lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function (lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() && lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' && lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec, localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n\n        rCodec.numChannels = Math.min(lCodec.numChannels, rCodec.numChannels); // push rCodec so we reply with offerer payload type\n\n        commonCapabilities.codecs.push(rCodec); // determine common feedback mechanisms\n\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function (fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type && lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n\n          return false;\n        }); // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n\n        break;\n      }\n    }\n  });\n  localCapabilities.headerExtensions.forEach(function (lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length; i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  }); // FIXME: fecMechanisms\n\n  return commonCapabilities;\n} // is action=setLocalDescription with type allowed in signalingState\n\n\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates().find(function (remoteCandidate) {\n    return candidate.foundation === remoteCandidate.foundation && candidate.ip === remoteCandidate.ip && candidate.port === remoteCandidate.port && candidate.priority === remoteCandidate.priority && candidate.protocol === remoteCandidate.protocol && candidate.type === remoteCandidate.type;\n  });\n\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n\n  return !alreadyAdded;\n}\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name; // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function (window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack', {\n      track: track\n    }));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack', {\n      track: track\n    }));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {\n      receiver: receiver\n    };\n    trackEvent.streams = streams;\n    window.setTimeout(function () {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function RTCPeerConnection(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n\n    ['addEventListener', 'removeEventListener', 'dispatchEvent'].forEach(function (method) {\n      pc[method] = _eventTarget[method].bind(_eventTarget);\n    });\n    this.canTrickleIceCandidates = null;\n    this.needNegotiation = false;\n    this.localStreams = [];\n    this.remoteStreams = [];\n    this._localDescription = null;\n    this._remoteDescription = null;\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n    config = JSON.parse(JSON.stringify(config || {}));\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw makeError('NotSupportedError', 'rtcpMuxPolicy \\'negotiate\\' is not supported');\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n    this._iceGatherers = [];\n\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config; // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n\n    this.transceivers = [];\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function get() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function get() {\n      return this._remoteDescription;\n    }\n  }); // set up event handlers on prototype\n\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function (name, event) {\n    if (this._isClosed) {\n      return;\n    }\n\n    this.dispatchEvent(event);\n\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function () {\n    var event = new Event('icegatheringstatechange');\n\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function () {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function () {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function () {\n    return this.remoteStreams;\n  }; // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n\n\n  RTCPeerConnection.prototype._createTransceiver = function (kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function (track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError', 'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function (s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track && this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track, transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function (stream) {\n    var pc = this;\n\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function (track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function (track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function (event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function (track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function (sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError', 'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function (t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError', 'Sender was not created by this connection.');\n    }\n\n    var stream = transceiver.stream;\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null; // remove the stream from the set of local streams\n\n    var localStreams = this.transceivers.map(function (t) {\n      return t.stream;\n    });\n\n    if (localStreams.indexOf(stream) === -1 && this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function (stream) {\n    var pc = this;\n    stream.getTracks().forEach(function (track) {\n      var sender = pc.getSenders().find(function (s) {\n        return s.track === track;\n      });\n\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function () {\n    return this.transceivers.filter(function (transceiver) {\n      return !!transceiver.rtpSender;\n    }).map(function (transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function () {\n    return this.transceivers.filter(function (transceiver) {\n      return !!transceiver.rtpReceiver;\n    }).map(function (transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n  RTCPeerConnection.prototype._createIceGatherer = function (sdpMLineIndex, usingBundle) {\n    var pc = this;\n\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state', {\n      value: 'new',\n      writable: true\n    });\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n\n    this.transceivers[sdpMLineIndex].bufferCandidates = function (event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0; // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n\n      iceGatherer.state = end ? 'completed' : 'gathering';\n\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n\n    iceGatherer.addEventListener('localcandidate', this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  }; // start gathering from an RTCIceGatherer.\n\n\n  RTCPeerConnection.prototype._gather = function (mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n\n    var bufferedCandidateEvents = this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate', this.transceivers[sdpMLineIndex].bufferCandidates);\n\n    iceGatherer.onlocalcandidate = function (evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n\n      var event = new Event('icecandidate');\n      event.candidate = {\n        sdpMid: mid,\n        sdpMLineIndex: sdpMLineIndex\n      };\n      var cand = evt.candidate; // Edge emits an empty object for RTCIceCandidateComplete‥\n\n      var end = !cand || Object.keys(cand).length === 0;\n\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        } // RTCIceCandidate doesn't have a component, needs to be added\n\n\n        cand.component = 1; // also the usernameFragment. TODO: update SDP to take both variants.\n\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate, SDPUtils.parseCandidate(serializedCandidate));\n        event.candidate.candidate = serializedCandidate;\n\n        event.candidate.toJSON = function () {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      } // update local description.\n\n\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] += 'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] += 'a=end-of-candidates\\r\\n';\n      }\n\n      pc._localDescription.sdp = SDPUtils.getDescription(pc._localDescription.sdp) + sections.join('');\n      var complete = pc.transceivers.every(function (transceiver) {\n        return transceiver.iceGatherer && transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n\n        pc._emitGatheringStateChange();\n      } // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n\n\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n\n        pc.iceGatheringState = 'complete';\n\n        pc._emitGatheringStateChange();\n      }\n    }; // emit already gathered candidates.\n\n\n    window.setTimeout(function () {\n      bufferedCandidateEvents.forEach(function (e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  }; // Create ICE transport and DTLS transport.\n\n\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function () {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n\n    iceTransport.onicestatechange = function () {\n      pc._updateIceConnectionState();\n\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n\n    dtlsTransport.ondtlsstatechange = function () {\n      pc._updateConnectionState();\n    };\n\n    dtlsTransport.onerror = function () {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state', {\n        value: 'failed',\n        writable: true\n      });\n\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  }; // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n\n\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function (sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  }; // Start the RTP Sender and Receiver for a transceiver.\n\n\n  RTCPeerConnection.prototype._transceive = function (transceiver, send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities, transceiver.remoteCapabilities);\n\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n\n      transceiver.rtpSender.send(params);\n    }\n\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video' && transceiver.recvEncodingParameters && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function (p) {\n          delete p.rtx;\n        });\n      }\n\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function (description) {\n    var pc = this; // Note: pranswer is not supported.\n\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError', 'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription', description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError', 'Can not set local ' + description.type + ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function (mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n      pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart, 'a=ice-lite').length > 0;\n      sections.forEach(function (mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities; // treat bundle-only as not-rejected.\n\n        var rejected = SDPUtils.isRejected(mediaSection) && SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection, sessionpart);\n\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters, isIceLite ? 'controlling' : 'controlled');\n            }\n\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          } // Calculate intersection of capabilities.\n\n\n          var params = getCommonCapabilities(localCapabilities, remoteCapabilities); // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n\n          pc._transceive(transceiver, params.codecs.length > 0, false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function (description) {\n    var pc = this; // Note: pranswer is not supported.\n\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError', 'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription', description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError', 'Can not set remote ' + description.type + ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function (stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart, 'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart, 'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart, 'a=ice-options:')[0];\n\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ').indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function (mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection); // treat bundle-only as not-rejected.\n\n      var rejected = SDPUtils.isRejected(mediaSection) && SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier(); // Reject datachannels which are not implemented yet.\n\n      if (rejected || kind === 'application' && (protocol === 'DTLS/SCTP' || protocol === 'UDP/DTLS/SCTP')) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] && pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n      var track; // FIXME: ensure the mediaSection has rtcp-mux set.\n\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection, sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection, sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n\n      recvEncodingParameters = SDPUtils.parseRtpEncodingParameters(mediaSection);\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n      var isComplete = SDPUtils.matchPrefix(mediaSection, 'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:').map(function (cand) {\n        return SDPUtils.parseCandidate(cand);\n      }).filter(function (cand) {\n        return cand.component === 1;\n      }); // Check if we can use BUNDLE and dispose transports.\n\n      if ((description.type === 'offer' || description.type === 'answer') && !rejected && usingBundle && sdpMLineIndex > 0 && pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n\n        pc.transceivers[sdpMLineIndex].iceGatherer = pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport = pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport = pc.transceivers[0].dtlsTransport;\n\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(pc.transceivers[0].dtlsTransport);\n        }\n\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(pc.transceivers[0].dtlsTransport);\n        }\n      }\n\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] || pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex, usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function (candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind); // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(function (codec) {\n            return codec.name !== 'rtx';\n          });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }]; // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n\n        var isNewTrack = false;\n\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver || new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track; // FIXME: does not work with Plan B.\n\n            if (remoteMsid && remoteMsid.stream === '-') {// no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function get() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n\n              Object.defineProperty(track, 'id', {\n                get: function get() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n\n              stream = streams.default;\n            }\n\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function (s) {\n            var nativeTrack = s.getTracks().find(function (t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters; // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n\n        pc._transceive(pc.transceivers[sdpMLineIndex], false, isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters = recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities = remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) && (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function (candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');\n          }\n\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        } // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n\n\n        var commonCapabilities = getCommonCapabilities(transceiver.localCapabilities, transceiver.remoteCapabilities);\n        var hasRtx = commonCapabilities.codecs.filter(function (c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver, direction === 'sendrecv' || direction === 'recvonly', direction === 'sendrecv' || direction === 'sendonly'); // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n\n\n        if (rtpReceiver && (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    Object.keys(streams).forEach(function (sid) {\n      var stream = streams[sid];\n\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function () {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function (item) {\n          var track = item[0];\n          var receiver = item[1];\n\n          if (stream.id !== item[2].id) {\n            return;\n          }\n\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function (item) {\n      if (item[2]) {\n        return;\n      }\n\n      fireAddTrack(pc, item[0], item[1], []);\n    }); // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n\n    window.setTimeout(function () {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n\n      pc.transceivers.forEach(function (transceiver) {\n        if (transceiver.iceTransport && transceiver.iceTransport.state === 'new' && transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' + 'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function () {\n    this.transceivers.forEach(function (transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    }); // FIXME: clean up tracks, local streams, remote streams, etc\n\n    this._isClosed = true;\n\n    this._updateSignalingState('closed');\n  }; // Update the signaling state.\n\n\n  RTCPeerConnection.prototype._updateSignalingState = function (newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n\n    this._dispatchEvent('signalingstatechange', event);\n  }; // Determine whether to fire the negotiationneeded event.\n\n\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function () {\n    var pc = this;\n\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n\n    this.needNegotiation = true;\n    window.setTimeout(function () {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  }; // Update the ice connection state.\n\n\n  RTCPeerConnection.prototype._updateIceConnectionState = function () {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function (transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n    newState = 'new';\n\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  }; // Update the connection state.\n\n\n  RTCPeerConnection.prototype._updateConnectionState = function () {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function (transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    }); // ICETransport.completed and connected are the same for this purpose.\n\n    states.connected += states.completed;\n    newState = 'new';\n\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function () {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError', 'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function (t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function (t) {\n      return t.kind === 'video';\n    }).length; // Determine number of audio and video tracks we need to send/recv.\n\n    var offerOptions = arguments[0];\n\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError('Legacy mandatory/optional constraints not supported.');\n      }\n\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function (transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    }); // Create M-lines for recvonly streams.\n\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n\n        numAudioTracks--;\n      }\n\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId, pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex, pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind); // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(function (codec) {\n          return codec.name !== 'rtx';\n        });\n      }\n\n      localCapabilities.codecs.forEach(function (codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' && codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        } // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n\n\n        if (transceiver.remoteCapabilities && transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function (remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() && codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function (hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities && transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function (rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      }); // generate an ssrc now, to be used later in rtpSender.send\n\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' && !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    }); // always offer BUNDLE and dispose on return if not supported.\n\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function (t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n\n    sdp += 'a=ice-options:trickle\\r\\n';\n    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities, 'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' && (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function (cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function () {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError', 'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' || pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError', 'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId, pc._sdpSessionVersion++);\n\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function (t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n\n    sdp += 'a=ice-options:trickle\\r\\n';\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') {\n            // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol + ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' + 'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' + 'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' + 'a=inactive\\r\\n' + 'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      } // FIXME: look at direction.\n\n\n      if (transceiver.stream) {\n        var localTrack;\n\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' && !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      } // Calculate intersection of capabilities.\n\n\n      var commonCapabilities = getCommonCapabilities(transceiver.localCapabilities, transceiver.remoteCapabilities);\n      var hasRtx = commonCapabilities.codecs.filter(function (c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities, 'answer', transceiver.stream, pc._dtlsRole);\n\n      if (transceiver.rtcpParameters && transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function (candidate) {\n    var pc = this;\n    var sections;\n\n    if (candidate && !(candidate.sdpMLineIndex !== undefined || candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    } // TODO: needs to go into ops queue.\n\n\n    return new Promise(function (resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError', 'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp = SDPUtils.getDescription(pc._remoteDescription.sdp) + sections.join('');\n\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n\n        var transceiver = pc.transceivers[sdpMLineIndex];\n\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n\n          var cand = Object.keys(candidate.candidate).length > 0 ? SDPUtils.parseCandidate(candidate.candidate) : {}; // Ignore Chrome's invalid candidates since Edge does not like them.\n\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          } // Ignore RTCP candidates, we assume RTCP-MUX.\n\n\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          } // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n\n\n          if (sdpMLineIndex === 0 || sdpMLineIndex > 0 && transceiver.iceTransport !== pc.transceivers[0].iceTransport) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError', 'Can not add ICE candidate'));\n            }\n          } // update the remoteDescription.\n\n\n          var candidateString = candidate.candidate.trim();\n\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' + (cand.type ? candidateString : 'end-of-candidates') + '\\r\\n';\n          pc._remoteDescription.sdp = SDPUtils.getDescription(pc._remoteDescription.sdp) + sections.join('');\n        } else {\n          return reject(makeError('OperationError', 'Can not add ICE candidate'));\n        }\n      }\n\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function (selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function (transceiver) {\n        if (transceiver.rtpSender && transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function (transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport', 'dtlsTransport'].forEach(function (method) {\n        if (transceiver[method]) {\n          promises.push(transceiver[method].getStats());\n        }\n      });\n    });\n    return Promise.all(promises).then(function (allStats) {\n      var results = new Map();\n      allStats.forEach(function (stats) {\n        stats.forEach(function (stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  }; // fix low-level stat names and return Map instead of object.\n\n\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer', 'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function (ortcObjectName) {\n    var obj = window[ortcObjectName];\n\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n\n      obj.prototype.getStats = function () {\n        return nativeGetstats.apply(this).then(function (nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function (id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  }); // legacy callback shims. Should be moved to adapter.js some days.\n\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function (method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n\n    RTCPeerConnection.prototype[method] = function () {\n      var args = arguments;\n\n      if (typeof args[0] === 'function' || typeof args[1] === 'function') {\n        // legacy\n        return nativeMethod.apply(this, [arguments[2]]).then(function (description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function (error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function (method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n\n    RTCPeerConnection.prototype[method] = function () {\n      var args = arguments;\n\n      if (typeof args[1] === 'function' || typeof args[2] === 'function') {\n        // legacy\n        return nativeMethod.apply(this, arguments).then(function () {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function (error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n\n      return nativeMethod.apply(this, arguments);\n    };\n  }); // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n\n  ['getStats'].forEach(function (method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n\n    RTCPeerConnection.prototype[method] = function () {\n      var args = arguments;\n\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments).then(function () {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n  return RTCPeerConnection;\n};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport _defineProperty from \"C:\\\\Users\\\\russe\\\\code\\\\openkitchen\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\n\nexport function extractVersion(uastring, expr, pos) {\n  var match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n} // Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\n\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n\n  proto.addEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n\n    var wrappedCallback = function wrappedCallback(e) {\n      var modifiedEvent = wrapper(e);\n\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n\n  proto.removeEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n\n      if (cb) {\n        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n\n  logDisabled_ = bool;\n  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';\n}\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\n\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\n\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');\n}\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\n\nexport function detectBrowser(window) {\n  var navigator = window.navigator; // Returned result object.\n\n  var result = {\n    browser: null,\n    version: null\n  }; // Fail early if it's not a browser\n\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) {\n    // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent, /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection && !window.RTCIceGatherer) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n    // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent, /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n    // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent, /AppleWebKit\\/(\\d+)\\./, 1);\n  } else {\n    // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\n\nexport function compactObject(data) {\n  if (typeof data !== 'object') {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function (accumulator, key) {\n    var isObject = typeof data[key] === 'object';\n    var value = isObject ? compactObject(data[key]) : data[key];\n    var isEmptyObject = isObject && !Object.keys(value).length;\n\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n\n    return Object.assign(accumulator, _defineProperty({}, key, value));\n  }, {});\n}\n/* iterates the stats graph recursively. */\n\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(function (name) {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(function (id) {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n/* filter getStats for a sender/receiver track. */\n\nexport function filterStats(result, track, outbound) {\n  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  var filteredResult = new Map();\n\n  if (track === null) {\n    return filteredResult;\n  }\n\n  var trackStats = [];\n  result.forEach(function (value) {\n    if (value.type === 'track' && value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(function (trackStat) {\n    result.forEach(function (stats) {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils.js';\nvar logging = utils.log;\nexport function shimGetUserMedia(window) {\n  var navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  var browserDetails = utils.detectBrowser(window);\n\n  var constraintsToChrome_ = function constraintsToChrome_(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n\n    var cc = {};\n    Object.keys(c).forEach(function (key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n\n      var r = typeof c[key] === 'object' ? c[key] : {\n        ideal: c[key]\n      };\n\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n\n      var oldname_ = function oldname_(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n\n        return name === 'deviceId' ? 'sourceId' : name;\n      };\n\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function (mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n\n    return cc;\n  };\n\n  var shimConstraints_ = function shimConstraints_(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n\n    constraints = JSON.parse(JSON.stringify(constraints));\n\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function remap(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && (typeof face === 'object' ? face : {\n        ideal: face\n      });\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n            devices = devices.filter(function (d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function (d) {\n              return matches.some(function (match) {\n                return d.label.toLowerCase().includes(match);\n              });\n            });\n\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {\n                exact: dev.deviceId\n              } : {\n                ideal: dev.deviceId\n              };\n            }\n\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function shimError_(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString: function toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function (c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function (e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_.bind(navigator); // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n\n  if (navigator.mediaDevices.getUserMedia) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n\n    navigator.mediaDevices.getUserMedia = function (cs) {\n      return shimConstraints_(cs, function (c) {\n        return origGetUserMedia(c).then(function (stream) {\n          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function (track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n\n          return stream;\n        }, function (e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n}","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n\n  if (!window.navigator.mediaDevices) {\n    return;\n  } // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n\n\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');\n    return;\n  }\n\n  window.navigator.mediaDevices.getDisplayMedia = function (constraints) {\n    return getSourceId(constraints).then(function (sourceId) {\n      var widthSpecified = constraints.video && constraints.video.width;\n      var heightSpecified = constraints.video && constraints.video.height;\n      var frameRateSpecified = constraints.video && constraints.video.frameRate;\n      constraints.video = {\n        mandatory: {\n          chromeMediaSource: 'desktop',\n          chromeMediaSourceId: sourceId,\n          maxFrameRate: frameRateSpecified || 3\n        }\n      };\n\n      if (widthSpecified) {\n        constraints.video.mandatory.maxWidth = widthSpecified;\n      }\n\n      if (heightSpecified) {\n        constraints.video.mandatory.maxHeight = heightSpecified;\n      }\n\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    });\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils.js';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get: function get() {\n        return this._ontrack;\n      },\n      set: function set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n    window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n      var _this = this;\n\n      if (!this._ontrackpoly) {\n        this._ontrackpoly = function (e) {\n          // onaddstream does not fire when a track is added to an existing\n          // stream. But stream.onaddtrack is implemented so we use that.\n          e.stream.addEventListener('addtrack', function (te) {\n            var receiver;\n\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = _this.getReceivers().find(function (r) {\n                return r.track && r.track.id === te.track.id;\n              });\n            } else {\n              receiver = {\n                track: te.track\n              };\n            }\n\n            var event = new Event('track');\n            event.track = te.track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver: receiver\n            };\n            event.streams = [e.stream];\n\n            _this.dispatchEvent(event);\n          });\n          e.stream.getTracks().forEach(function (track) {\n            var receiver;\n\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = _this.getReceivers().find(function (r) {\n                return r.track && r.track.id === track.id;\n              });\n            } else {\n              receiver = {\n                track: track\n              };\n            }\n\n            var event = new Event('track');\n            event.track = track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver: receiver\n            };\n            event.streams = [e.stream];\n\n            _this.dispatchEvent(event);\n          });\n        };\n\n        this.addEventListener('addstream', this._ontrackpoly);\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', function (e) {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver', {\n          value: {\n            receiver: e.receiver\n          }\n        });\n      }\n\n      return e;\n    });\n  }\n}\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {\n      return {\n        track: track,\n\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n\n          return this._dtmf;\n        },\n\n        _pc: pc\n      };\n    }; // augment addTrack when getSenders is not available.\n\n\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function () {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n\n      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n      window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n        var sender = origAddTrack.apply(this, arguments);\n\n        if (!sender) {\n          sender = shimSenderWithDtmf(this, track);\n\n          this._senders.push(sender);\n        }\n\n        return sender;\n      };\n\n      var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n\n      window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n        origRemoveTrack.apply(this, arguments);\n\n        var idx = this._senders.indexOf(sender);\n\n        if (idx !== -1) {\n          this._senders.splice(idx, 1);\n        }\n      };\n    }\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n\n    window.RTCPeerConnection.prototype.addStream = function (stream) {\n      var _this2 = this;\n\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(function (track) {\n        _this2._senders.push(shimSenderWithDtmf(_this2, track));\n      });\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n\n    window.RTCPeerConnection.prototype.removeStream = function (stream) {\n      var _this3 = this;\n\n      this._senders = this._senders || [];\n      origRemoveStream.apply(this, [stream]);\n      stream.getTracks().forEach(function (track) {\n        var sender = _this3._senders.find(function (s) {\n          return s.track === track;\n        });\n\n        if (sender) {\n          // remove sender\n          _this3._senders.splice(_this3._senders.indexOf(sender), 1);\n        }\n      });\n    };\n  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n\n    window.RTCPeerConnection.prototype.getSenders = function () {\n      var _this4 = this;\n\n      var senders = origGetSenders.apply(this, []);\n      senders.forEach(function (sender) {\n        return sender._pc = _this4;\n      });\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get: function get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n\n        return this._dtmf;\n      }\n    });\n  }\n}\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  var origGetStats = window.RTCPeerConnection.prototype.getStats;\n\n  window.RTCPeerConnection.prototype.getStats = function (selector, successCallback, errorCallback) {\n    var _this5 = this;\n\n    var args = arguments; // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    } // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n\n\n    if (origGetStats.length === 0 && (arguments.length === 0 || typeof arguments[0] !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    var fixChromeStats_ = function fixChromeStats_(response) {\n      var standardReport = {};\n      var reports = response.result();\n      reports.forEach(function (report) {\n        var standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(function (name) {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n      return standardReport;\n    }; // shim getStats with maplike support\n\n\n    var makeMapStats = function makeMapStats(stats) {\n      return new Map(Object.keys(stats).map(function (key) {\n        return [key, stats[key]];\n      }));\n    };\n\n    if (arguments.length >= 2) {\n      var successCallbackWrapper_ = function successCallbackWrapper_(response) {\n        args[1](makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_, arguments[0]]);\n    } // promise-support\n\n\n    return new Promise(function (resolve, reject) {\n      origGetStats.apply(_this5, [function (response) {\n        resolve(makeMapStats(fixChromeStats_(response)));\n      }, reject]);\n    }).then(successCallback, errorCallback);\n  };\n}\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  } // shim sender stats.\n\n\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function () {\n        var _this6 = this;\n\n        var senders = origGetSenders.apply(this, []);\n        senders.forEach(function (sender) {\n          return sender._pc = _this6;\n        });\n        return senders;\n      };\n    }\n\n    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function () {\n        var sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n\n    window.RTCRtpSender.prototype.getStats = function () {\n      var sender = this;\n      return this._pc.getStats().then(function (result) {\n        return (\n          /* Note: this will include stats of all senders that\n           *   send a track with the same id as sender.track as\n           *   it is not possible to identify the RTCRtpSender.\n           */\n          utils.filterStats(result, sender.track, true)\n        );\n      });\n    };\n  } // shim receiver stats.\n\n\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers = function () {\n        var _this7 = this;\n\n        var receivers = origGetReceivers.apply(this, []);\n        receivers.forEach(function (receiver) {\n          return receiver._pc = _this7;\n        });\n        return receivers;\n      };\n    }\n\n    utils.wrapPeerConnectionEvent(window, 'track', function (e) {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n\n    window.RTCRtpReceiver.prototype.getStats = function () {\n      var receiver = this;\n      return this._pc.getStats().then(function (result) {\n        return utils.filterStats(result, receiver.track, false);\n      });\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  } // shim RTCPeerConnection.getStats(track).\n\n\n  var origGetStats = window.RTCPeerConnection.prototype.getStats;\n\n  window.RTCPeerConnection.prototype.getStats = function () {\n    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {\n      var track = arguments[0];\n      var sender;\n      var receiver;\n      var err;\n      this.getSenders().forEach(function (s) {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(function (r) {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n\n        return r.track === track;\n      });\n\n      if (err || sender && receiver) {\n        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n\n      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));\n    }\n\n    return origGetStats.apply(this, arguments);\n  };\n}\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams = function () {\n    var _this8 = this;\n\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    return Object.keys(this._shimmedLocalStreams).map(function (streamId) {\n      return _this8._shimmedLocalStreams[streamId][0];\n    });\n  };\n\n  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n  window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n    if (!stream) {\n      return origAddTrack.apply(this, arguments);\n    }\n\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    var sender = origAddTrack.apply(this, arguments);\n\n    if (!this._shimmedLocalStreams[stream.id]) {\n      this._shimmedLocalStreams[stream.id] = [stream, sender];\n    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n      this._shimmedLocalStreams[stream.id].push(sender);\n    }\n\n    return sender;\n  };\n\n  var origAddStream = window.RTCPeerConnection.prototype.addStream;\n\n  window.RTCPeerConnection.prototype.addStream = function (stream) {\n    var _this9 = this;\n\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    stream.getTracks().forEach(function (track) {\n      var alreadyExists = _this9.getSenders().find(function (s) {\n        return s.track === track;\n      });\n\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    });\n    var existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    var newSenders = this.getSenders().filter(function (newSender) {\n      return existingSenders.indexOf(newSender) === -1;\n    });\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n\n  window.RTCPeerConnection.prototype.removeStream = function (stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    delete this._shimmedLocalStreams[stream.id];\n    return origRemoveStream.apply(this, arguments);\n  };\n\n  var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n\n  window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n    var _this10 = this;\n\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    if (sender) {\n      Object.keys(this._shimmedLocalStreams).forEach(function (streamId) {\n        var idx = _this10._shimmedLocalStreams[streamId].indexOf(sender);\n\n        if (idx !== -1) {\n          _this10._shimmedLocalStreams[streamId].splice(idx, 1);\n        }\n\n        if (_this10._shimmedLocalStreams[streamId].length === 1) {\n          delete _this10._shimmedLocalStreams[streamId];\n        }\n      });\n    }\n\n    return origRemoveTrack.apply(this, arguments);\n  };\n}\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  var browserDetails = utils.detectBrowser(window); // shim addTrack and removeTrack.\n\n  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  } // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n\n\n  var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;\n\n  window.RTCPeerConnection.prototype.getLocalStreams = function () {\n    var _this11 = this;\n\n    var nativeStreams = origGetLocalStreams.apply(this);\n    this._reverseStreams = this._reverseStreams || {};\n    return nativeStreams.map(function (stream) {\n      return _this11._reverseStreams[stream.id];\n    });\n  };\n\n  var origAddStream = window.RTCPeerConnection.prototype.addStream;\n\n  window.RTCPeerConnection.prototype.addStream = function (stream) {\n    var _this12 = this;\n\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    stream.getTracks().forEach(function (track) {\n      var alreadyExists = _this12.getSenders().find(function (s) {\n        return s.track === track;\n      });\n\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    }); // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n\n    if (!this._reverseStreams[stream.id]) {\n      var newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n\n    origAddStream.apply(this, [stream]);\n  };\n\n  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n\n  window.RTCPeerConnection.prototype.removeStream = function (stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);\n    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];\n    delete this._streams[stream.id];\n  };\n\n  window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n    var _this13 = this;\n\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    }\n\n    var streams = [].slice.call(arguments, 1);\n\n    if (streams.length !== 1 || !streams[0].getTracks().find(function (t) {\n      return t === track;\n    })) {\n      // this is not fully correct but all we can manage without\n      // [[associated MediaStreams]] internal slot.\n      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');\n    }\n\n    var alreadyExists = this.getSenders().find(function (s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw new DOMException('Track already exists.', 'InvalidAccessError');\n    }\n\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    var oldStream = this._streams[stream.id];\n\n    if (oldStream) {\n      // this is using odd Chrome behaviour, use with caution:\n      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n      // Note: we rely on the high-level addTrack/dtmf shim to\n      // create the sender with a dtmf sender.\n      oldStream.addTrack(track); // Trigger ONN async.\n\n      Promise.resolve().then(function () {\n        _this13.dispatchEvent(new Event('negotiationneeded'));\n      });\n    } else {\n      var newStream = new window.MediaStream([track]);\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      this.addStream(newStream);\n    }\n\n    return this.getSenders().find(function (s) {\n      return s.track === track;\n    });\n  }; // replace the internal stream id with the external one and\n  // vice versa.\n\n\n  function replaceInternalStreamId(pc, description) {\n    var sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {\n      var externalStream = pc._reverseStreams[internalId];\n      var internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp: sdp\n    });\n  }\n\n  function replaceExternalStreamId(pc, description) {\n    var sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {\n      var externalStream = pc._reverseStreams[internalId];\n      var internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp: sdp\n    });\n  }\n\n  ['createOffer', 'createAnswer'].forEach(function (method) {\n    var nativeMethod = window.RTCPeerConnection.prototype[method];\n\n    window.RTCPeerConnection.prototype[method] = function () {\n      var _this14 = this;\n\n      var args = arguments;\n      var isLegacyCall = arguments.length && typeof arguments[0] === 'function';\n\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [function (description) {\n          var desc = replaceInternalStreamId(_this14, description);\n          args[0].apply(null, [desc]);\n        }, function (err) {\n          if (args[1]) {\n            args[1].apply(null, err);\n          }\n        }, arguments[2]]);\n      }\n\n      return nativeMethod.apply(this, arguments).then(function (description) {\n        return replaceInternalStreamId(_this14, description);\n      });\n    };\n  });\n  var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\n\n  window.RTCPeerConnection.prototype.setLocalDescription = function () {\n    if (!arguments.length || !arguments[0].type) {\n      return origSetLocalDescription.apply(this, arguments);\n    }\n\n    arguments[0] = replaceExternalStreamId(this, arguments[0]);\n    return origSetLocalDescription.apply(this, arguments);\n  }; // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n\n  var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {\n    get: function get() {\n      var description = origLocalDescription.get.apply(this);\n\n      if (description.type === '') {\n        return description;\n      }\n\n      return replaceInternalStreamId(this, description);\n    }\n  });\n\n  window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n    var _this15 = this;\n\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    } // We can not yet check for sender instanceof RTCRtpSender\n    // since we shim RTPSender. So we check if sender._pc is set.\n\n\n    if (!sender._pc) {\n      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');\n    }\n\n    var isLocal = sender._pc === this;\n\n    if (!isLocal) {\n      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');\n    } // Search for the native stream the senders track belongs to.\n\n\n    this._streams = this._streams || {};\n    var stream;\n    Object.keys(this._streams).forEach(function (streamid) {\n      var hasTrack = _this15._streams[streamid].getTracks().find(function (track) {\n        return sender.track === track;\n      });\n\n      if (hasTrack) {\n        stream = _this15._streams[streamid];\n      }\n    });\n\n    if (stream) {\n      if (stream.getTracks().length === 1) {\n        // if this is the last track of the stream, remove the stream. This\n        // takes care of any shimmed _senders.\n        this.removeStream(this._reverseStreams[stream.id]);\n      } else {\n        // relying on the same odd chrome behaviour as above.\n        stream.removeTrack(sender.track);\n      }\n\n      this.dispatchEvent(new Event('negotiationneeded'));\n    }\n  };\n}\nexport function shimPeerConnection(window) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n\n  if (!window.RTCPeerConnection) {\n    return;\n  } // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n\n\n  ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n    var nativeMethod = window.RTCPeerConnection.prototype[method];\n\n    window.RTCPeerConnection.prototype[method] = function () {\n      arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n      return nativeMethod.apply(this, arguments);\n    };\n  }); // support for addIceCandidate(null or undefined)\n\n  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n\n  window.RTCPeerConnection.prototype.addIceCandidate = function () {\n    if (!arguments[0]) {\n      if (arguments[1]) {\n        arguments[1].apply(null);\n      }\n\n      return Promise.resolve();\n    }\n\n    return nativeAddIceCandidate.apply(this, arguments);\n  };\n}\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function (e) {\n    var pc = e.target;\n\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n\n    return e;\n  });\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function shimError_(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function toString() {\n        return this.name;\n      }\n    };\n  }; // getUserMedia error shim.\n\n\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n\n  navigator.mediaDevices.getUserMedia = function (c) {\n    return origGetUserMedia(c).catch(function (e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n}","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n\n  window.navigator.mediaDevices.getDisplayMedia = window.navigator.getDisplayMedia.bind(window.navigator);\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport { filterIceServers } from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimPeerConnection(window) {\n  var browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function (args) {\n        return args;\n      };\n    }\n\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function (args) {\n        return args;\n      };\n    } // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n\n\n    if (browserDetails.version < 15025) {\n      var origMSTEnabled = Object.getOwnPropertyDescriptor(window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set: function set(value) {\n          origMSTEnabled.set.call(this, value);\n          var ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  } // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n\n\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get: function get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n\n        return this._dtmf;\n      }\n    });\n  } // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n\n\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  var RTCPeerConnectionShim = shimRTCPeerConnection(window, browserDetails.version);\n\n  window.RTCPeerConnection = function (config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers, browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n\n    return new RTCPeerConnectionShim(config);\n  };\n\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender && !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack = window.RTCRtpSender.prototype.setTrack;\n  }\n}","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils'; // Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\n\nexport function filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function (server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n\n      var isString = typeof urls === 'string';\n\n      if (isString) {\n        urls = [urls];\n      }\n\n      urls = urls.filter(function (url) {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        var validTurn = url.startsWith('turn') && !url.startsWith('turn:[') && url.includes('transport=udp');\n\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n\n        return validTurn && !hasTurn;\n      });\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport function shimGetUserMedia(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function (constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function remap(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n\n    navigator.mediaDevices.getUserMedia = function (c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n\n      MediaStreamTrack.prototype.getSettings = function () {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n\n      MediaStreamTrack.prototype.applyConstraints = function (c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n\n  window.navigator.mediaDevices.getDisplayMedia = function (constraints) {\n    if (!(constraints && constraints.video)) {\n      var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');\n      err.name = 'NotFoundError'; // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n\n      err.code = 8;\n      return Promise.reject(err);\n    }\n\n    if (constraints.video === true) {\n      constraints.video = {\n        mediaSource: preferredMediaSource\n      };\n    } else {\n      constraints.video.mediaSource = preferredMediaSource;\n    }\n\n    return window.navigator.mediaDevices.getUserMedia(constraints);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get: function get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nexport function shimPeerConnection(window) {\n  var browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  } // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n\n\n  ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n    var nativeMethod = window.RTCPeerConnection.prototype[method];\n\n    window.RTCPeerConnection.prototype[method] = function () {\n      arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n      return nativeMethod.apply(this, arguments);\n    };\n  }); // support for addIceCandidate(null or undefined)\n\n  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n\n  window.RTCPeerConnection.prototype.addIceCandidate = function () {\n    if (!arguments[0]) {\n      if (arguments[1]) {\n        arguments[1].apply(null);\n      }\n\n      return Promise.resolve();\n    }\n\n    return nativeAddIceCandidate.apply(this, arguments);\n  };\n\n  var modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n  var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n\n  window.RTCPeerConnection.prototype.getStats = function (selector, onSucc, onErr) {\n    return nativeGetStats.apply(this, [selector || null]).then(function (stats) {\n      if (browserDetails.version < 53 && !onSucc) {\n        // Shim only promise getStats with spec-hyphens in type names\n        // Leave callback version alone; misc old uses of forEach before Map\n        try {\n          stats.forEach(function (stat) {\n            stat.type = modernStatsTypes[stat.type] || stat.type;\n          });\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          } // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n\n\n          stats.forEach(function (stat, i) {\n            stats.set(i, Object.assign({}, stat, {\n              type: modernStatsTypes[stat.type] || stat.type\n            }));\n          });\n        }\n      }\n\n      return stats;\n    }).then(onSucc, onErr);\n  };\n}\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n\n  var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function () {\n      var _this = this;\n\n      var senders = origGetSenders.apply(this, []);\n      senders.forEach(function (sender) {\n        return sender._pc = _this;\n      });\n      return senders;\n    };\n  }\n\n  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function () {\n      var sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n\n  window.RTCRtpSender.prototype.getStats = function () {\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\n  };\n}\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n\n  var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function () {\n      var _this2 = this;\n\n      var receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(function (receiver) {\n        return receiver._pc = _this2;\n      });\n      return receivers;\n    };\n  }\n\n  utils.wrapPeerConnectionEvent(window, 'track', function (e) {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n\n  window.RTCRtpReceiver.prototype.getStats = function () {\n    return this._pc.getStats(this.track);\n  };\n}\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n\n  window.RTCPeerConnection.prototype.removeStream = function (stream) {\n    var _this3 = this;\n\n    utils.deprecated('removeStream', 'removeTrack');\n    this.getSenders().forEach(function (sender) {\n      if (sender.track && stream.getTracks().includes(sender.track)) {\n        _this3.removeTrack(sender);\n      }\n    });\n  };\n}\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\n\nimport * as utils from '../utils';\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams = function () {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n\n      return this._localStreams;\n    };\n  }\n\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n\n    window.RTCPeerConnection.prototype.addStream = function (stream) {\n      var _this = this;\n\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n\n      stream.getTracks().forEach(function (track) {\n        return _addTrack.call(_this, track, stream);\n      });\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n      if (stream) {\n        if (!this._localStreams) {\n          this._localStreams = [stream];\n        } else if (!this._localStreams.includes(stream)) {\n          this._localStreams.push(stream);\n        }\n      }\n\n      return _addTrack.call(this, track, stream);\n    };\n  }\n\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream = function (stream) {\n      var _this2 = this;\n\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n\n      var index = this._localStreams.indexOf(stream);\n\n      if (index === -1) {\n        return;\n      }\n\n      this._localStreams.splice(index, 1);\n\n      var tracks = stream.getTracks();\n      this.getSenders().forEach(function (sender) {\n        if (tracks.includes(sender.track)) {\n          _this2.removeTrack(sender);\n        }\n      });\n    };\n  }\n}\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams = function () {\n      return this._remoteStreams ? this._remoteStreams : [];\n    };\n  }\n\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get: function get() {\n        return this._onaddstream;\n      },\n      set: function set(f) {\n        var _this3 = this;\n\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = function (e) {\n          e.streams.forEach(function (stream) {\n            if (!_this3._remoteStreams) {\n              _this3._remoteStreams = [];\n            }\n\n            if (_this3._remoteStreams.includes(stream)) {\n              return;\n            }\n\n            _this3._remoteStreams.push(stream);\n\n            var event = new Event('addstream');\n            event.stream = stream;\n\n            _this3.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n    window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n      var pc = this;\n\n      if (!this._onaddstreampoly) {\n        this.addEventListener('track', this._onaddstreampoly = function (e) {\n          e.streams.forEach(function (stream) {\n            if (!pc._remoteStreams) {\n              pc._remoteStreams = [];\n            }\n\n            if (pc._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n\n            pc._remoteStreams.push(stream);\n\n            var event = new Event('addstream');\n            event.stream = stream;\n            pc.dispatchEvent(event);\n          });\n        });\n      }\n\n      return origSetRemoteDescription.apply(pc, arguments);\n    };\n  }\n}\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n\n  var prototype = window.RTCPeerConnection.prototype;\n  var createOffer = prototype.createOffer;\n  var createAnswer = prototype.createAnswer;\n  var setLocalDescription = prototype.setLocalDescription;\n  var setRemoteDescription = prototype.setRemoteDescription;\n  var addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer = function (successCallback, failureCallback) {\n    var options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    var promise = createOffer.apply(this, [options]);\n\n    if (!failureCallback) {\n      return promise;\n    }\n\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n\n  prototype.createAnswer = function (successCallback, failureCallback) {\n    var options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    var promise = createAnswer.apply(this, [options]);\n\n    if (!failureCallback) {\n      return promise;\n    }\n\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n\n  var withCallback = function withCallback(description, successCallback, failureCallback) {\n    var promise = setLocalDescription.apply(this, [description]);\n\n    if (!failureCallback) {\n      return promise;\n    }\n\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function withCallback(description, successCallback, failureCallback) {\n    var promise = setRemoteDescription.apply(this, [description]);\n\n    if (!failureCallback) {\n      return promise;\n    }\n\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function withCallback(candidate, successCallback, failureCallback) {\n    var promise = addIceCandidate.apply(this, [candidate]);\n\n    if (!failureCallback) {\n      return promise;\n    }\n\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n\n  prototype.addIceCandidate = withCallback;\n}\nexport function shimGetUserMedia(window) {\n  var navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    var mediaDevices = navigator.mediaDevices;\n\n    var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function (constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);\n    }.bind(navigator);\n  }\n}\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({}, constraints, {\n      video: utils.compactObject(constraints.video)\n    });\n  }\n\n  return constraints;\n}\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  var OrigPeerConnection = window.RTCPeerConnection;\n\n  window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n    if (pcConfig && pcConfig.iceServers) {\n      var newIceServers = [];\n\n      for (var i = 0; i < pcConfig.iceServers.length; i++) {\n        var server = pcConfig.iceServers[i];\n\n        if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {\n          utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n          server = JSON.parse(JSON.stringify(server));\n          server.urls = server.url;\n          delete server.url;\n          newIceServers.push(server);\n        } else {\n          newIceServers.push(pcConfig.iceServers[i]);\n        }\n      }\n\n      pcConfig.iceServers = newIceServers;\n    }\n\n    return new OrigPeerConnection(pcConfig, pcConstraints);\n  };\n\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype; // wrap static methods. Currently just generateCertificate.\n\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get: function get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCPeerConnection && 'receiver' in window.RTCTrackEvent.prototype && // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n  // defined for some reason even when window.RTCTransceiver is not.\n  !window.RTCTransceiver) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get: function get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nexport function shimCreateOfferLegacy(window) {\n  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n\n  window.RTCPeerConnection.prototype.createOffer = function (offerOptions) {\n    if (offerOptions) {\n      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\n      }\n\n      var audioTransceiver = this.getTransceivers().find(function (transceiver) {\n        return transceiver.receiver.track.kind === 'audio';\n      });\n\n      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n        if (audioTransceiver.direction === 'sendrecv') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('sendonly');\n          } else {\n            audioTransceiver.direction = 'sendonly';\n          }\n        } else if (audioTransceiver.direction === 'recvonly') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('inactive');\n          } else {\n            audioTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {\n        this.addTransceiver('audio');\n      }\n\n      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\n      }\n\n      var videoTransceiver = this.getTransceivers().find(function (transceiver) {\n        return transceiver.receiver.track.kind === 'video';\n      });\n\n      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n        if (videoTransceiver.direction === 'sendrecv') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('sendonly');\n          } else {\n            videoTransceiver.direction = 'sendonly';\n          }\n        } else if (videoTransceiver.direction === 'recvonly') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('inactive');\n          } else {\n            videoTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {\n        this.addTransceiver('video');\n      }\n    }\n\n    return origCreateOffer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n\n  var NativeRTCIceCandidate = window.RTCIceCandidate;\n\n  window.RTCIceCandidate = function (args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate); // Add a serializer that does not serialize the extra attributes.\n\n      augmentedCandidate.toJSON = function () {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment\n        };\n      };\n\n      return augmentedCandidate;\n    }\n\n    return new NativeRTCIceCandidate(args);\n  };\n\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype; // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n\n    return e;\n  });\n}\nexport function shimMaxMessageSize(window) {\n  if (window.RTCSctpTransport || !window.RTCPeerConnection) {\n    return;\n  }\n\n  var browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get: function get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  var sctpInDescription = function sctpInDescription(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n\n    var sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(function (mediaSection) {\n      var mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n\n    var version = parseInt(match[1], 10); // Test for NaN (yes, this is ugly)\n\n    return version !== version ? -1 : version;\n  };\n\n  var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    var canSendMaxMessageSize = 65536;\n\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n\n    return canSendMaxMessageSize;\n  };\n\n  var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    var maxMessageSize = 65536; // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n\n    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n\n    return maxMessageSize;\n  };\n\n  var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n  window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n    this._sctp = null;\n\n    if (sctpInDescription(arguments[0])) {\n      // Check if the remote is FF.\n      var isFirefox = getRemoteFirefoxVersion(arguments[0]); // Get the maximum message size the local peer is capable of sending\n\n      var canSendMMS = getCanSendMaxMessageSize(isFirefox); // Get the maximum message size of the remote peer.\n\n      var remoteMMS = getMaxMessageSize(arguments[0], isFirefox); // Determine final maximum message size\n\n      var maxMessageSize;\n\n      if (canSendMMS === 0 && remoteMMS === 0) {\n        maxMessageSize = Number.POSITIVE_INFINITY;\n      } else if (canSendMMS === 0 || remoteMMS === 0) {\n        maxMessageSize = Math.max(canSendMMS, remoteMMS);\n      } else {\n        maxMessageSize = Math.min(canSendMMS, remoteMMS);\n      } // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n      // attribute.\n\n\n      var sctp = {};\n      Object.defineProperty(sctp, 'maxMessageSize', {\n        get: function get() {\n          return maxMessageSize;\n        }\n      });\n      this._sctp = sctp;\n    }\n\n    return origSetRemoteDescription.apply(this, arguments);\n  };\n}\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  } // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n\n  function wrapDcSend(dc, pc) {\n    var origDataChannelSend = dc.send;\n\n    dc.send = function () {\n      var data = arguments[0];\n      var length = data.length || data.size || data.byteLength;\n\n      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\n      }\n\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n\n  var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\n\n  window.RTCPeerConnection.prototype.createDataChannel = function () {\n    var dataChannel = origCreateDataChannel.apply(this, arguments);\n    wrapDcSend(dataChannel, this);\n    return dataChannel;\n  };\n\n  utils.wrapPeerConnectionEvent(window, 'datachannel', function (e) {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\n\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n\n  var proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get: function get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get: function get() {\n      return this._onconnectionstatechange || null;\n    },\n    set: function set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n\n      if (cb) {\n        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ['setLocalDescription', 'setRemoteDescription'].forEach(function (method) {\n    var origMethod = proto[method];\n\n    proto[method] = function () {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = function (e) {\n          var pc = e.target;\n\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            var newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n\n          return e;\n        };\n\n        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);\n      }\n\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  var browserDetails = utils.detectBrowser(window);\n\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n\n  var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n\n  window.RTCPeerConnection.prototype.setRemoteDescription = function (desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter(function (line) {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n\n    return nativeSRD.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nimport { adapterFactory } from './adapter_factory.js';\nvar adapter = adapterFactory({\n  window: window\n});\nexport default adapter;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils'; // Browser shims.\n\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim'; // Shimming starts here.\n\nexport function adapterFactory() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      window = _ref.window;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true\n  };\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n  var adapter = {\n    browserDetails: browserDetails,\n    commonShim: commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  }; // Shim browser if found.\n\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming chrome.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = chromeShim;\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming firefox.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = firefoxShim;\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming edge.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = edgeShim;\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window); // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming safari.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = safariShim;\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}"],"sourceRoot":""}